
1、这些命令应该有必要知道干啥的
	env, unset, ls -lS, natapp 外网域名, grep --color, 
	ps -ef | grep SparkSubmit | grep realtime_tag.tyx | awk '{print $2}' | xargs sudo kill  -9
	fsdisk: 可显示分区的设定信息,并检查分区是否正常,也可用来建立分区
	ps -ef 和 ps aux 每个字段含义要搞懂
	22 端口映射怎么做
	FTP 端口 https://www.jianshu.com/p/9b6389a26336
	执行kill命令, 系统会发送一个 SIGNTERM(15) 信号给对应的程序. SIGTERM多半是会被阻塞的. kill -9命令,系统给对应程序发送的信号是 SIGNKILL(9)	 
	echo 'derby.log' | xargs cat , 要知道 xargs 的作用
2、通过inode删除乱码文件 find ./* -inum 1839498 -delete ; 查找大于X文件: find ./ -size +120M
3、ssh user@host 'mkdir -p .ssh && cat >> .ssh/authorized_keys' < ~/.ssh/id_rsa.pub
(1)"$ ssh user@host",表示登录远程主机；
(2)单引号中的mkdir .ssh && cat >> .ssh/authorized_keys,表示登录后在远程shell上执行的命令：
(3)"$ mkdir -p .ssh"的作用是,如果用户主目录中的.ssh目录不存在,就创建一个；
(4)'cat >> .ssh/authorized_keys' < ~/.ssh/id_rsa.pub的作用是,将本地的公钥文件~/.ssh/id_rsa.pub,重定向追加到远程文件 authorized_keys的末尾
4、
	接收端执行： nc -l 8888 | tar zxf -
	发送端：tar zcf - xxx | nc 接收端ip 8888
	# xxxx可以是目录也可以是任意文件甚至多个文件
5、cpu 相关
	查看CPU个数 cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l
	查看CPU核数 cat /proc/cpuinfo | grep "cpu cores" | uniq
	查看所有逻辑CPU的个数 cat /proc/cpuinfo | grep "processor" | wc -l  总的逻辑CPU数 = 物理CPU个数 * 每颗物理CPU的核数 * 超线程数
	查询CPU是否启用超线程: cat /proc/cpuinfo | grep -e "cpu cores" -e "siblings" | sort | uniq  看到cpu cores数量是siblings数量一半,说明启动了超线程. 
	查看 Linux 系统版本 cat /proc/version, uname -a
	lscpu
6、开放端口的方法：
	a. 开放端口命令： /sbin/iptables -I INPUT -p tcp --dport 8080 -j ACCEPT
	b.保存：/etc/rc.d/init.d/iptables save
	c.重启服务：/etc/init.d/iptables restart
	d.查看端口是否开放：/sbin/iptables -L -n
7、linux下ssh到其他机器执行命令	ssh cloud02 /root/b.sh
8、yum install telnet-server -y	yum install telnet -y
9、yum install openssh-server yum install openssh-client
10、rpm -ivh http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm  2. yum install nginx
11、服务端：nc -l 9999 客户端：nc localhost 9999
12、grep -l '查找的文本内容' */*/*.log   -- -l表示列出文件名
13、zip -r 目录 不加-r会只打空目录,而 tar -czf z.tar.gz tt 则不用. 对多个文件直接打包时没有区别
14、清linux缓存 sync && echo 3 > /proc/sys/vm/drop_caches
15、tar -czf txt.tar.gz *.xtx   //将目录里所有txt文件打包成txt.tar后,并且将其用gzip压缩,生成一个gzip压缩过的包,命名为txt.tar.gz
16、command >out.file 2>&1 &
	command >out.file是将command的输出重定向到out.file文件,即输出内容不打印到屏幕上,而是输出到out.file文件中.  
	2>&1 是将标准出错重定向到标准输出,这里的标准输出已经重定向到了out.file文件,即将标准出错也输出到out.file文件中. 最后一个& , 是让该命令在后台执行
17、配置了一下vim /etc/resolv.conf中的nameserver 202.106.0.20,即可连通了外网
18、rsync -r ./apache-maven-3.3.9 cluster02:/tmp, rsync -r 172.16.10.5:/etc /tmp

================================================================================
1、Linux程序的存放目录大致有三个地方：
/etc, /bin, /sbin, /lib  ：系统启动就需要用到的程序，这些目录不能挂载额外的分区，必须在根文件系统的分区上
/usr/bin,/usr/sbin,/usr/lib：操作系统核心功能，可以单独分区
/usr/local/bin,/usr/local/sbin,/usr/local/lib,/usr/local/etc,/usr/local/man：这个用于安装第三方程序，分别对应了二进制文件、库文件、配置文件、帮助文档的目录
2、执行configure文件，此文件有两个功能：1、让用户选定编译特性；2、检查编译环境。configure执行后将生成MakeFile文件。例如：
./configure --prefix=/usr/local/nginx --conf-path=/etc/nginx/nginx.conf
其中我们通过--prefix制定了安装路径，通过--conf-path制定了配置文件的具体位置。注意：不是所有的程序的configure参数都是一样的 可以使用 ./configure --help查看详细参数说明。如果该程序所依赖的库在当前系统中没有安装，则会导致configure最后报错，遇到这种情况就需要你先安装依赖库
3、默认情况下，系统搜索库文件的路径/lib, /usr/lib; 要增添额外搜寻路径(注意：有的程序不提供库文件，那就不需要此设置了)
在/etc/ld.so.conf.d/中创建以.conf为后缀名的文件，而后把要增添的路径直接写至此文件中；然后执行如下命令使其生效 ldconfig
4、如果程序提供了库文件，也会相应的提供头文件，一般在安装目录的include目录下，系统默认扫描头文件的路径是：/usr/include。我们可以在/usr/include下用链接连接到我们安装程序的头文件。ln -s /usr/local/nginx/include  /usr/include/yourname
5、可能程序还提供了帮助文档，一般是安装目录下的man目录，为了我们可以使用man命令查看我们程序的帮助文档，我们需要：在/etc/man.config中添加一条MANPATH，指向我们的文档目录

6、./configure --prefix=/usr
  上面的意思是将该软件安装在 /usr 下面，执行文件就会安装在 /usr/bin （而不是默认的 /usr/local/bin),资源文件就会安装在 /usr/share（而不是默认的/usr/local/share）。
同时一些软件的配置文件你可以通过指定 --sys-config= 参数进行设定。有一些软件还可以加上 --with、--enable、--without、--disable 等等参数对编译加以控制，你可以通过允许 ./configure --help 察看详细的说明帮助。
7、make ，这一步就是编译，大多数的源代码包都经过这一步进行编译（当然有些perl或python编写的软件需要调用perl或python来进行编译）。
如果 在 make 过程中出现 error ，你就要记下错误代码（注意不仅仅是最后一行），然后你可以向开发者提交 bugreport（一般在 INSTALL 里有提交地址），
或者你的系统少了一些依赖库等，这些需要自己仔细研究错误代码。make 的作用是开始进行源代码编译，以及一些功能的提供，这些功能由他的 Makefile 设置文件提供相关的功能，比如 make install 一般表示进行安装，make uninstal 是卸载，不加参数就是默认的进行源代码编译。
make 是 Linux 开发套件里面自动化编译的一个控制程序，他通过借助 Makefile 里面编写的编译规范（语法很多，类似一个可以运行的脚本程序。反正我是看不懂，所以你也别问我怎么编写）。进行自动化的调用 gcc 、ld 以及运行某些需要的程序进行编译的程序。
一般情况下，他所使用的 Makefile 控制代码，由 configure 这个设置脚本根据给定的参数和系统环境生成。
8、make insatll ，这条命令来进行安装（当然有些软件需要先运行 make check 或 make test 来进行一些测试），这一步一般需要你有 root 权限（因为要向系统写入文件）
9、cc是gcc的连接，CC是makefile里用来定义编译器的,是为了方便代码移植而设定,因为不同的平台可能用到不同的编译器 
for exampe: 
x86 gcc 
mips64 gcc-mips64 
当我们把x86下的code移植到mips64时,只要将makefile里CC=gcc改成CC=gcc-mips64 
而不需要将所有出现gcc的地方都改成gcc-mips64
10、Linux CC与Linux GCC的区别概括介绍。从名字上看，老的unix系统的CC程序叫做C Compiler。但GCC这个名字按GNU的说法叫做Gnu Compiler Collection。因为gcc包含很多编译器(C, C++, Objective-C, Ada, Fortran,and 　 Java)。所以它们是不一样的，一个是一个古老的C编译器，一个是编译器的Gnu的编译器的集合(Gcc里的C编译器比CC强大太多了，所以你没必要用CC)。当你调用gcc时不一定是调用的C/C++编译器，是gcc根据文件扩展名自动识别并调用对应的编译器，具体可查阅$man gcc。
你是下载不到CC的，原因是：CC来自于昂贵的Unix系统，CC是商业软件，要想用你需要打电话，写订单，而不是打开你的Browser去download。
linux下的cc是gcc的符号链接。可以通过$ls –l /usr/bin/cc来简单察看.而编译时看到的控制台输出CC则是一个指向gcc的变量，该变量是make程序的内建变量，就算你在Makefile中没有CC= ，该变量也会存在，并默认指向gcc。cc的符号链接和变量存在的意义在于源码的移植性，可以方便的用GCC来编译老的用cc编译的unix软件，甚至连Makefile都不要改。而且也便于linux程序在unix下编译。
近几年的一个新情况是越来越多的unix用户，据我所知像solaris,bsd用户也不太使用CC了，人们都一定要装一个gcc，用它来编译C/C++程序。原因显而易见，gcc足够强大，健壮。支持估计目前为止只有它支持的ISO c/c++ 新特性。当然你最好不要使用night版本的gcc。
10、install 不是make的参数，而是在makefile（Makefile）中有如：install:的语句。如果用make install，那么就执行install:后面的语句。
11、有了这个Makefile文件，不论我们什么时候修改了源程序当中的什么文件，我们只要执行make命令，我们的编译器都只会去编译和我们修改的文件有关的文件，其它的文件它连理都不想去理的
12、linux /sbin/service 它本身是一个shell脚本程序, 然后调用 /etc/rc.d/init.d/
uname -r,  uname -m,  uname -a
windows jenkins.msi, 这东西是 java 开发的
ldd a.out
13、编译:
  a. 头文件的预编译（precompilation） 不同的源码文件，可能引用同一个头文件（比如stdio.h）。编译的时候，头文件也必须一起编译。为了节省时间，编译器会在编译源码之前，先编译头文件。这保证了头文件只需编译一次，不必每次用到的时候，都重新编译了。
不过，并不是头文件的所有内容，都会被预编译。用来声明宏的#define命令，就不会被预编译
  b. 预处理（Preprocessing）
预编译完成后，编译器就开始替换掉源码中bash的头文件和宏。实际上，插入源码的是预编译后的结果。编译器在这一步还会移除注释。
这一步称为"预处理"（Preprocessing），因为完成之后，就要开始真正的处理了
  c. 编译（Compilation）
预处理之后，编译器就开始生成机器码。对于某些编译器来说，还存在一个中间步骤，会先把源码转为汇编码（assembly），然后再把汇编码转为机器码。
  d. 连接（Linking）
对象文件还不能运行，必须进一步转成可执行文件。如果你仔细看上一步的转码结果，会发现其中引用了stdout函数和fwrite函数。也就是说，程序要正常运行，除了上面的代码以外，还必须有stdout和fwrite这两个函数的代码，它们是由C语言的标准库提供的。
编译器的下一步工作，就是把外部函数的代码（通常是后缀名为.lib和.a的文件），添加到可执行文件中。这就叫做连接（linking）。这种通过拷贝，将外部函数库添加到可执行文件的方式，叫做静态连接（static linking），后文会提到还有动态连接（dynamic linking）。
make命令的作用，就是从第四步头文件预编译开始，一直到做完这一步。
  e. 安装（Installation）
上一步的连接是在内存中进行的，即编译器在内存中生成了可执行文件。下一步，必须将可执行文件保存到用户事先指定的安装目录。
表面上，这一步很简单，就是将可执行文件（连带相关的数据文件）拷贝过去就行了。但是实际上，这一步还必须完成创建目录、保存文件、设置权限等步骤。这整个的保存过程就称为"安装"（Installation）
  f. 操作系统连接
可执行文件安装后，必须以某种方式通知操作系统，让其知道可以使用这个程序了。比如，我们安装了一个文本阅读程序，往往希望双击txt文件，该程序就会自动运行。
这就要求在操作系统中，登记这个程序的元数据：文件名、文件描述、关联后缀名等等。Linux系统中，这些信息通常保存在/usr/share/applications目录下的.desktop文件中。另外，在Windows操作系统中，还需要在Start启动菜单中，建立一个快捷方式。
这些事情就叫做"操作系统连接"。make install命令，就用来完成"安装"和"操作系统连接"这两步。
  g. 生成安装包
写到这里，源码编译的整个过程就基本完成了。但是只有很少一部分用户，愿意耐着性子，从头到尾做一遍这个过程。事实上，如果你只有源码可以交给用户，他们会认定你是一个不友好的家伙。大部分用户要的是一个二进制的可执行程序，立刻就能运行。这就要求开发者，将上一步生成的可执行文件，做成可以分发的安装包。
所以，编译器还必须有生成安装包的功能。通常是将可执行文件（连带相关的数据文件），以某种目录结构，保存成压缩文件包，交给用户。
  h. 动态连接（Dynamic linking）
正常情况下，到这一步，程序已经可以运行了。至于运行期间（runtime）发生的事情，与编译器一概无关。但是，开发者可以在编译阶段选择可执行文件连接外部函数库的方式，到底是静态连接（编译时连接），还是动态连接（运行时连接）。所以，最后还要提一下，什么叫做动态连接。
前面已经说过，静态连接就是把外部函数库，拷贝到可执行文件中。这样做的好处是，适用范围比较广，不用担心用户机器缺少某个库文件；缺点是安装包会比较大，而且多个应用程序之间，无法共享库文件。动态连接的做法正好相反，外部函数库不进入安装包，只在运行时动态引用。好处是安装包会比较小，多个应用程序可以共享库文件；缺点是用户必须事先安装好库文件，而且版本和安装位置都必须符合要求，否则就不能正常运行。
现实中，大部分软件采用动态连接，共享库文件。这种动态共享的库文件，Linux平台是后缀名为.so的文件，Windows平台是.dll文件，Mac平台是.dylib文件。

14、本质上来说库是一种可执行代码的二进制形式，可以被操作系统载入内存执行。库有两种：静态库（.a、.lib）和动态库（.so、.dll）。所谓静态、动态是指链接
15、Linux静态库命名规范，必须是"lib[your_library_name].a"：lib为前缀，中间是静态库名，扩展名为.a。
16、数据存放的区域有三个地方：.data段、.bss段和.rodata段。那么你肯定想知道数据是如何放在这三个段中的，怎么区分。
	对于初始化不为0的全局变量和静态变量存放在.data段
	对于未初始化或者初始化值为0的段存放在.bss段中，而且不占目标文件的空间
	对于字符串常量则存放在.rodata段中，而且对于字符串而言还有一个特殊的地方，就是它在内存中只存在一份
17、a和b明明是局部变量，难道不是数据吗？嗯，它真的不是数据，它是一条指令，这条指令的功能是在函数的栈帧上开辟四个字节，并向这个地址上写入指定值
18、说完数据和指令，接下来是另一个基础而且重要的概念，那就是符号。我们在编写程序完，进行链接时会碰到这样的错误："错误       LNK1169    找到一个或多个多重定义的符号 "，即符号重定义
 在程序中，所有数据都会产生符号，而对于代码段只有函数名会产生符号。而且符号的作用域有global和local之分，对于未用static修饰过的全局变量和函数产生的均是global符号，这样的变量和函数可以被其他文件所看见和引用
19、centos8 五笔输入法:
	yum search wubi
	yum -y install ...
	以上两步应该就可以了, 然后在 setting --> Region&language 中添加 input sources
	如果不行执行一下这个命令 ibus-setup
