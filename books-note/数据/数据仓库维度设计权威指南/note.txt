================================= 第一章 =================================
1.1 维度设计
1.1.1.1 操作型系统
  业务过程的维度模型由两个组件构成:度量以及度量的环境。这些组件也称为事实和维度
  维度模型应用于关系数据库环境时被称为星型模式。应用于多维数据库环境时,维度模型被称为多维数据集
  每个维度模型的核心都是业务度量的集合,业务度量反映了对业务过程的评价,并描述各种度量的环境
  在关系数据库设计领域,广泛使用并被大家认可的最佳的操作型系统的模式设计方法是第三范式。这种设计方法采用实体-关系模型进行描述,实体关系模型通常简称为 
E-R模型。与其他合适的数据库技术相结合,这种设计方法可以高性能地、以【保持一致性和可预测的方式】完成对原子事务的插入、更新和删除操作。开发人员通常将事务
处理的这一特性称为ACID属性——原子性、一致性、隔离性和持久性

1NF：每个属性都不可再分
2NF：属性之间不存在依赖
3NF：属性之间不存在传递依赖

1.2.1 维度表
  有时, 维度表简称为维度或维。但这种简化有时可能会造成混淆, 因为维度这一概念通常也被用于描述单个的列。通常可以根据环境来区分维度是维度表还是维度列。
如果没有其他办法, 本书将使用术语维度属性和维度表来加以区分。
  开展维度设计时,尽管不太常见,但设计者有时也会履行关于范式的要求。在此情况下的模式称为雪花模式,附加的表通常称为【支架表】
1.2.2 键与历史
  自然键, 代理键, 甚至非键(地名等)是可以并存的我觉得

================================= 第二章 =================================
  本章将数据仓库体系结构分成三类(表2-1), 虽然这些体系结构在基本方法上有所不同, 但是星型模式在每一种体系结构中都存在
  数据集市是数据仓库中的主题区域, 图2-2中
2.3 独立型数据集市
  独立型数据集市在短期内获取快速的、廉价的结果的同时,会导致长期费用的提高和效率的低下。
  --与上面说的数据集市应该不是一回事
  
================================= 第三章 =================================
  
3.1.1 代理键与自然键
  自然键通常来源于源系统。它们不能唯一地区分数据仓库中的行,但能够区分来自源系统中对应的实体
3.1.2.6.行为维度与混合属性
  基于事实计算得到的维度称为行为维度
3.1.3
  1. 基于相似性组合维度 
    维度表中的属性相互之间可能存在各种各样的关系,但维度设计并未试图建模这些关系。产品、品牌、分类被组合到一个单独的产品表中;销售人员、地区区划、区域
    被组合到一个单独的销售人员表中
  2. 无相似性的杂项维度
    在某些情况下,创建一个不存在实际关系的维度表是有用。这些新的属性可以确定订单是否是信用卡订单,是否是已结清的订单,是否是二次订单等。这类属性相互之间
	没有直接关系
  3. 雪花模式及支架表
    对于品牌属性,将其从产品表中去掉,存储到其他表中。可以采用被称为雪花模式的一种星型模式的变种形式。此时,品牌表被称为支架表
	该技术为必须支持并发事务类型的操作型系统带来很多好处。分析型系统没有这样做的必要
	
3.2.5 退化维
  事务标识通常作为退化维度存储。它也可以作为事实表中行的唯一标识,并用于定义事实表的粒度
3.3.2 变化类型2
图3-8
  其实缓慢变化维这事用我的思路, 快照 + 历史拉链表, 实事表和维度表用相应的 dt 去 join(比如说周期快照统计场景), 但是底层计算是怎么做的呢, 会像分桶那样
对应 dt 之间 join 么, 还是全 dt join 在 where 中过滤, 区别不能算小啊, 当然解决办法可以用 union

3.3.3 选择并实现响应类型
  主要是图3-10 中重新声明历史, 没看懂可以看看图3-7 下面的技巧
3.4 多维数据集
  维度模型并不总是采用关系数据库实现。多维数据库,或称 MDB,以一种称为多维数据集的方式存储维度信息。多维数据集的基本概念背后隐藏的思想是通过预先计算
【维度值】和事实值的方式获得各种组合值
-- 第二句话似乎警醒了我, kylin 不就是这样么
================================= 第四章 =================================
4.1 事实表与业务过程
  技巧: 为便于独立地分析研究, 应为每个过程建立一个事实表
  -- 我觉得这点非常重要啊
  当设计者采纳上述指导原则时,使用者就可以分析每个独立的过程, 而无须考虑大量复杂的情况

4.4 从多个事实表中分析事实
  一些最强大的分析跨越了过程的边界。例如对预测与现实的比较、生产与订单的比较、订单与发货的比较等
  在比较不同事实表中的事实时, 应该采用称为横向钻取的包含两个步骤的过程来获得。它描述的是跨越一个星型模式到另外一个星型模式的步骤
  [不要试困对事实表进行连接操作,无论是直接操作还是通过维度表操作。对事实表的连接操作将会产生不正确的结果] 
    --产品22在查询涉及的聚集范围内有一个订单、两个发货,因此将订单计算了两次。 还可以注意到产品333在报表中根本没有显示。尽管它的确存在订单,但没有对应的发货
4.4.2 横向钻取

================================= 第五章 =================================
  跨越多个过程边界的分析具有非常强大的功能,这种分析方法适用于某个主题区域乃至整个企业。正如前面章节所讨论的,关注过程的分析方法主要针对独立的事实表,
而跨过程分析需要将不同事实表的信息整合起来。这一分析方法通过横向钻取实现, 维度是其成功与否的关键
  恰当的维度设计和内容,既可以在某个主题区域内、也可以跨企业比较不同事实表中的事实。许多功能强大的度量体系只能以这种方式被提供。另一方面,不一致的维度
会阻碍横向钻取,并会产生令人沮丧的信息孤岛

5.1 星型模式之间的协同
  从逻辑层面来看,当一系列星型模式共享一组公共维度时,所涉及的维度称为一致性维度。就像在前面章节建议的那样,当对两个事实表进行比较时,不需要共享相同的物理
存在的维度表。如果不同的维度表是一致的,也可以对它们进行横向钻取。
  当维度表存在不一致时,短期的成功难以弥补长期的错误。例如,订单和发货的星型模式可能一次一个的执行。随着每一个模式的联机,将会为多个相关部门提供新的
洞察力。在此方面,每个成功的实现很好地反映了数据仓库团队取得的收获。如果这些不同的星型模式没有共享一个类似客户是什么或产品是什么的公共视图,那么采用
星型模式的好处将受到质疑。因为在没有公共视图的情况下,虽然可以分别就订单或发货进行研究,但不能对它们进行比较。

5.2维度与横向钻取
  维度是确保将不同过程中的信息集成起来的实现横向钻取活动的关键。当维度的结构或内容不同时,横向钻取将会失败,不同的过程将不能实现协同。支持横向钻取时,
多维表并不需要完全相同。当一个维度表中的属性是另一个维度表中属性的子集时,横向钻取也是可以实现的
...
5.3.1 维度一致性的类型
5.3.2 规划一致性
5.4 结构与一致性
5.5
5.6

================================= 第六章 =================================
6.1 将维度分组到表中
  与实体-关系模型不同,维度模型不能揭示相互关联的属性之间存在的关系。认识到这种差异是处理混乱局面的第一步。上下文关系易于传递给事实表,而天然存在的相关性则由维度表中共存的属性表示
6.1.2 对维度分组时的考虑

6.2.3 微型维度缓解 ETL 瓶颈和过度增长

图6-7 事实表中员工的多重角色  这种表 join 时怎么优化呢, 按道理维表不应该被 join 多次吧
6.5 行为维度
  行为维度将事实转换为维度,以确保获得强大的分析能力,不需要使用复杂查询或详细处理的分析
--什么维度可以认为是行为维度, 我觉得可以认为是业务事件产生的维度, 并且值不变是一个必要条件
  内容我没看明白
  
================================= 第七章 =================================
  钻取的一般概念简单来说就是添加维度细节
  雪花模式除了能节省一些空间外,对于分析型数据库来说并没有多大的效用
  在操作型环境中,数据集被规范化以确保数据在面对大量的、并发事务的插入、更新、删除操作时具有完整性。节省空间是规范化带来的一个额外的好处,但这不是规范化的目的
  在操作型系统中有用的数据模型,对分析型系统中的数据模型却不一定有用
  规范化原则适用于操作型系统的应用模式,支持各种能更新数据的并发事务。分析型数据库不能共享该应用模式且不需要此类规范化。没有必要为确保数据的完整性
而增加复杂性。规范化降低了可用性,使 ETL过程复杂化,并且可能会对性能产生影响。
  有充分的理由认为需要在分析型环境中使用雪花模式。雪花模式只会带来复杂性,并且使系统性能降低。星型模式配置易于理解和维护,可能执行得更好。
7.3.2采用雪花架构
7.4 支架表

================================= 第八章 =================================
8.2.2 类型3解决方案
8.3.2 混合响应
================================= 第九章 =================================
多值维度 当事实表的行涉及维度表中的多行时,将产生多值维度。
多值属性 当一个维度行需要获取单一属性的多个值时,将产生多值属性。
  解决上述问题需要利用一类被称为桥接表的新表。桥接表被认为是一把双刃剑,它提供了强大的能力和灵活性以确保广泛适用的分析能力的实现。但获得这一能力需要付
出代价,主要的代价是存在风险。简单说,桥接表的使用增加了误用模式的可能性,会导致不准确结果的产生
  事实表有时也被称为从属实体,因为其定义依赖于其他表的主键。--主外键 主子表 也是根据这个关系定义的吧
9.2.2 为多值维度构建桥接表
9.3 多值属性
================================= 第十章 =================================
10.1 递归层次
10.2 递归层次的扁平化
10.3层次桥接表
10.4 变化与层次桥接表
10.5 关于层次桥接表的相关讨论
================================= 第十一章 =================================
半可加的概念对每个拥有银行账户的人来说都应该是熟悉的。如果在一周中每天结束的时候,您的账户里有100美元,这并不意味着在本周结束的时候您拥有700美元

================================= 第十二章 =================================
为事件而设的无事实的事实表: 记录活动的发生。虽然没有事实被明确地存储,但是这些事件能被计算出来,产生有意义的过程度量。示例中包含被处理或批准的文档数目,
  呼叫客户支持中心的次数或者广告的数量。
为条件而设的无事实的事实表: 用来捕获有意义的信息,这些信息并不是商业活动的一部分。条件在时间点上与不同维度关联。当与活动进行比较时,可以提供有价值的见解。
  示例的情况包含过程的合格人选、分派到客户的销售人员、激活产品的市场过程、有影响的天气条件等。


================================= 第十二章 =================================

(比如合同或申请）的处理是通过计算一天处理的数量来度量的,它跨越了多种维度,
包含行为(已接受、已评估、已拒绝等等）、顾客和处理人员等。
●客户支持的度量是通过计算服务请求打开、关闭的次数进行的,或者通过代理、顾客、
产品和问题单来处理。
告商跨越多个维度来计算显示的数目或者展出的广告。
● 通过界面点击情况和页面浏览情况的计数来度量 Web 网站的使用情况。
●学校或商业跟踪出席或缺席的人数

当唯一度量的事物是发生的事件时,有可能需要设计一个无事实的事实表

客户联系方式可以用这种方法度量。假设某企业想度量与客户联系的情况。熟知联系情况可
能对多个活动的调整有帮助,避免客户被联系得太频繁或太少的情况发生。在此示例中,假设有
两种联系客户的渠道:E-mail（电子邮件）和 Telephone（电话)。一个给定的联系方式可能由客户(来
电)或企业(呼出)开始。一些呼出的联系方式可能被自动化了,如E-mail,其他的不是如此

无事实的事实表也可以用在不清楚对应事件活动的情况下。常见的例子包含:
● 跟踪分派给每个客户的售货员。
● 记录应用于过程或收益的个体的资格。
● 记录恶劣天气警报的影响。
● 获取在给定时间内有效的营销活动
12.2.1 对条件建模的原因
12.2.2 用于条件的无事实的事实表
12.2.3比较行为和条件
12.2.4 缓慢变化维度和条件
================================= 第十三章 =================================
没看明白
================================= 第十四章 =================================
没看明白
================================= 第十五章 =================================
