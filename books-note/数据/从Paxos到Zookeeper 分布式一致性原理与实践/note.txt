================================第一章================================
1、2009年开始阿里开始了去IOE计划
2、通常我们认为现代计算机体系中, 单机内存访问的延时在纳秒数据级(10ns左右), 一次正常的网络通信延迟在0.1~1ms左右(相当于内存访问延时的105~106倍 )
3、事务ACID特性：原子性,一致性,隔离性,持久性
	四种隔离级别(P6)
4、典型分布式事务场景：跨银行转账(这是吗? 两个银行都是单结点)
5、CAP定理：一个分布式系统最多同时满足 一致性(Consistency) 可用性(Availability) 分区容错性(Partition tolerance),中的两项
	一致性：就是各副本一致
	可用性：在有限时间内返回结果
	分区容错性：能容忍一部分机器网络故障 (分布式系统和必然要求, 所以往往在 C 与 A 之间权衡)
	
================================第二章================================
1、二阶段提交：
	第一阶段：投票阶段
		1. 协调者向所有的参与者发送事务执行请求, 并等待参与者反馈事务执行结果。
		2. 事务参与者收到请求之后, 执行事务, 但不提交, 并记录事务日志。
		3. 参与者将自己事务执行情况反馈给协调者, 同时阻塞等待协调者的后续指令 (me: 阻塞到底有什么影响, handler 被占用? 应该是这个)
	第二阶段：事务提交阶段（还有可能是事务回滚, 类似）
		1. 协调者向各个参与者发送commit通知, 请求提交事务。
		2. 参与者收到事务提交通知之后, 执行commit操作, 然后释放占有的资源。
		3. 参与者向协调者返回事务commit结果信息
  缺点：同步阻塞、单点、脑裂/数据不一致(网络问题导致数据不一致, 仅被一部分参与者所收到并执行了commit操作)
  --ES集群出现了脑裂问题，即集群中不同的节点对于master的选择出现了分歧，出现了多个master竞争
2、三阶段提交：
	第一阶段：can_commit
		1. 协调者向各个参与者发送事务询问通知, 询问是否可以执行事务操作, 并等待回复
		2. 各个参与者依据自身状况回复一个预估值, 如果预估自己能够正常执行事务就返回确定信息, 并进入预备状态, 否则返回否定信息
	第二阶段：pre_commit(me:这个阶段要加锁/阻塞吧)
		本阶段协调者会根据第一阶段的询盘结果采取相应操作, 询盘结果主要有三种：						
			1. 所有的参与者都返回确定信息
			2. 一个或多个参与者返回否定信息
			3. 协调者等待超时
		针对第一种情况, 协调者会向所有参与者发送事务执行请求, 具体步骤如下：						
			1. 协调者向所有的事务参与者发送事务执行通知
			2. 参与者收到通知后, 执行事务, 但不提交
			3. 参与者将事务执行情况返回给客户端
		在上面的步骤中, 如果参与者等待超时, 则会中断事务。 针对第二、三种情况, 协调者认为事务无法正常执行, 于是向各个参与者发出abort通知, 请求退出预备状态, 具体步骤如下：
			1. 协调者向所有事务参与者发送abort通知
			2. 参与者收到通知后, 中断事务
	第三阶段：do_commit
		如果第二阶段事务未中断, 那么本阶段协调者将会依据事务执行返回的结果来决定提交或回滚事务, 分为三种情况：
			1. 所有的参与者都能正常执行事务
			2. 一个或多个参与者执行事务失败
			3. 协调者等待超时
		针对第二、三种情况, 协调者认为事务无法正常执行, 于是向各个参与者发送事务回滚请求, 具体步骤如下：  
			1. 协调者向所有参与者发送事务rollback通知
			2. 所有参与者在收到通知之后执行rollback操作, 并释放占有的资源
			3. 参与者向协调者反馈事务提交结果

	  需要注意的是一但进入阶段三, 如果因为协调者或网络问题, 导致参与者迟迟不能收到来自协调者的commit或rollback请求, 那么参与者将不会如两阶段提交中那样
	陷入阻塞, 而是等待超时后继续commit。相对于两阶段提交虽然降低了同步阻塞, 但仍然无法避免数据的不一致性

	相较于两阶段提交的优点：降低了参与者的阻塞范围, 并且能够在出现单点故障后继续达成一致
3、大多数系统部署在一个局域网中, 因此消息被篡改的可能性非常罕见---在工程实践中可以假设不存在拜占庭问题
2.2.3 Paxos算法详解
================================第四章================================
ZAB
================================第六章================================
6.1
6.2
6.3

以后章节结合源码对比看吧

