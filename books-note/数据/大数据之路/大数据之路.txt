图1.1 阿里巴巴大 据系 架构图
阿里巴巴的日志采集体系方案包括两大体系： Aplus.JS Web
日志采集技术方案； UserTrack APP 端日志采集技术方案。在采集技
术基础之上，阿里巴巴用面向各个场景的埋点规范，来满足通用浏览、
点击、特殊交互、 APP 事件、 H5 APP 里的 H5 Native 日志数据打
通等多种业务场景

Max Compute 是阿里巴巴自主研发的离线大数据平台 ，其丰富的
功能和强大的存储及计算能力使得阿里巴巴的大数据有了强大的存储
和计算引擎； StreamCompute 是网里巴巴自主研发的流式大数据平台，

OneData 是数据整合及管理的方法体系和工具

操作数据层（ Operational Data Store, ODS 、明细数据层（ Data WarehouseDetail , DWD ）、汇总数据层（ Data Warehouse Summary, DWS ）和用数据层（ Application Data Store, ADS ）


在阿里大数据系统中，元数据模型整合及应用是一个重要的组成部
分，主要包含数据源元数据、数据仓库元数据 、数据链路元数据、工具
类元数据 数据质量类元数据等。元数据应 主要面向数据发现、数据
管理等 ，如用于存储、计算和成本管理等。

===================第二章 日志采集====================
上面描述了一次典型的网页浏览过程，如果需要记录这次浏览行
为，则采集日志的动作必然是附加在上述四个步骤中的某 环节内完成
的。在第一步和第二步，用户的请求尚未抵达服务器 而直到第三步完
成，我们也只能认为服务器处理了请求，不能保证浏览器能够正确地解
析和渲染页面，尚不能确保用户已确实打开页面，因此在前 步是无法
采集用户的浏览日志的。那么采集日志的动作，需要在第四步，也就是
浏览器开始解析文档时才能进行。根据前文所述，可以很自然地得出在
这一模式下最直接的日志采集思路：在 HTML 文档内的适当位置增加
一个日志采集节点，当浏览器解析到这个节点时，将自动触发 个特定
HTTP 请求到日志采集服务器。如此一来，当日志采集服务器接收到
这个请求时，就可以确定浏览器已经成功地接收和打开了页面。这就是
目前几乎所有互联网网站页面浏览日志采集的基本原理，而业界的各
网页日志采集的解决方案只是在实施的细节、自动采集内容的广度以及
部署的便利性上有所不同。

在 HTML 文档内植入日志采集脚本的动作可以由业
务服务器在响应业务请求时动态执行，也可以在开发页面时由开发人员
手动植人。在阿里巴巴，这两种方式均有采用，其中前 种方式的占比
较高，这 点与业界的普遍状况有所不同


2.1.2 页面交互日志采集
2.2 无线客户端的日志采集

3.3.1 分库分表的处理

5.3 流式数据模型
5.4 大促挑战＆保障

6. 1 服务架构演进
6.2 技术架构
6.3 最佳实践

第七章 数据挖掘

9.2.1 名词术语
9.3.2 模型层次

3. 公共处理逻辑下沉及单一

整个阿里集团涉及的业务涵盖电商、数字娱乐、导航（高德）、移
动互联网服务等领域。各个领域又涵盖多个业务线，如电商领域就涵盖
了C类（淘宝、天猫、天猫国际）与B类（阿里巴巴中文站、国际站
速卖通）业务。

图 9.11 实施工作流

（非书中）供应链是由供应商、制造商、仓库、配送中心和渠道商等构

2. 实施工作流
数据域划分
构建总线矩阵

=======================================================
1、对于维度模型设计采用四步设计方法：选择业务过程、声明粒度、确定维度、确定事实
3、比如交易过程中的创订单、买家付款，物流过程中的揽货、发货、签收，退款中的申请退款、申请小 介入等，都可以被理解为一种事务Kimball维度建模理论认为，
为了便于进行独立的分析研究，应该为每个业务过程建立一个事实表。对于是否将不同业务过程放到同事实表 中，将在下一节 中详细介绍
业务过程选定以后，就要针对每个业务过程确定一个粒度，即确定事务事实表每一行所表达的细节层次。

选定好业务过程并且确定粒度后，就可以确定维度信息了。在淘宝交
易事务事实表设计过程中，按照经常用于统计分析的场景，确定维度包含：
买家、卖家、商品、商品类目、发货地区、收货地区、父订单维度以及杂
项维度。由于订单的属性较多，比如订单的业务类型、是否无线交易、订
单的 attributes 属性等，对于这些使用较多却又无法归属到上述买卖家或商
品维度中的属性，则新建 个杂项维度进行存放

4、单事务事实表，顾名思义，即针对每个业务过程设计 个事实表。
这样设计的优点不言而喻，可以方便地对每个业务过程进行独立的分析

5、多事务事实表 将不同的事实放到同 个事实表中，即同一个事
表包含不同的业务过程。多事务事实表在设计时有两种方法进行事实的
处理 ①不同业务过程的事实使用不同的事实字段进行存放：①不同业务过程的事实使用同一个事实字段进行存放，但增加一个业务过程标签。
接下来将通过淘宝交易事务事实表和淘宝收藏商品事务事实表分别阐述其设计方法。

淘宝交易事务事实表 中同时包含了下单、支付和成功完结三个业务过程，这三个业务过程拥有相同的粒度，都是子订
单粒度，也比较适合放到同一个事实表中。选择业务过程时没有把发货也加到此事务事实表中，原因是发货的粒度比子订单更细，属于不同粒
度上的业务过程，因此没有放到同一个事实表中。

图11 12 沟宝 易订单详情实例
图11 13 多事 事实农数 实仔


6、
收藏商品和删除商品是两个不同的业务过程，但是确定了相同的粒度和维度 ，所以考虑、设 多事务事实表 ，将这两个业务过程放到同
事实表中 ，只是在不同业务过程的事实上进行区分。在前面的“淘宝交易事务事实表”中是使用不同字段存放不 同业务过程的事实，这里的解
决方案是使用同 一个字段存放不 同业务过程的事实，使用标签字段区分不同 业务过程，比如收藏事务事实表使用 个“收藏事件类型”字段来
区分是收藏商品还是删除商品。收藏商品和删除商品的事实主要是商品价格，不过收藏事务事实表更多的是无事实的事实表，一般用于统计收
藏或者删除的次数。

多事务事实表的选择
上面介绍了两种多事务事实表的设计方式，在实际应用中 要根据业务过程进行选择。由于是多事务事实表，因此在事实表中包含多个业务过程

当不同业务过程的度量比较相似、差异不大时，可以采用第多事务事实表的设计方式，使用同一个字段来表示度量数据。但这种方式存在 个问题一一－在同 个周期内会存在多条记录


当不同业务过程的度量差异较大时，可以选择第一种多事务事实
表的设计方式，将不同业务过程的度量使用不同字段冗余到
中，非当前业务过程则置零表示。这种方式所存在的问题是度量
字段零值较多。

7、
对于单事务事实表，一个业务过程建立一个事实表，只反映一个业
务过程的事实 对于多事务事实表，在同一个事实表 中反映多个业务过
程。多个业务过程是否放到同一个事实表中，首先需要分析不同业务过
程之间的相似性和业务源系统。比如淘宝交易的下单、支付和成功完结
这三个业务过程是存在相似性的，都属于订单处理中的 环，并且都来
自于交易系统 ，因此适合放到同一个事务事实表 中。

8、
快照事实表的设计有一些 区别于事务事实表设计的性质。事务事实
表的粒度能以多 种方式表达，但快照事实表的粒度通常以维度形式声
明$事务事实表是稀疏的，但快照事实表是稠密的 事务事实表中的事
实是完全可加的，但快照模型将至少包含一个用来展示半可加性质的事
实。

快照事实表以预定的间隔采样状态度量。这种间隔联合一个或多个
维度，将被用来定义快照事实表的粒度，每行都将包含记录所涉及状态
的事实。

快照粒度
事务事实表的粒度可以通过业务过程中所涉及的细节程度来描述，
但快照事实表的粒度通常总是被多维声明，可以简单地理解为快照需要
采样的周期以及什么将被采样。在淘宝交易卖家快照事实表中，粒度可
以被理解为每天针对卖家的历史截至当日的下单支付金额进行快照。

图11.24 沟宝交易累积快照事实农（确定事实前）
图11.25 淘宝交易累积快照事实农（确定事实后）

第五步：退化维度。在大数据的事实表模型设计中，更多的是考虑
提高下游用户的使用效率，降低数据获取的复杂性，减少关联的表数量。
一方面，存储成本降低了，而相比之下 CPU 成本仍然较高；另一方面，
在大数据时代，很多维表比事实表还大，如淘宝几十亿的商品、几亿的
买家等，在分布式数据仓库系统中，事实表和维表关联的戚本很高。所
以在传统的维度模型设计完成之后，在物理实现中将各维度的常用属性
退化到事实表中，以大大提高对事实表的过滤查询、统计聚合等操作的
效率，具体详情不再赘述。


累积快照事实表适用于具有较明确起止时间的短生命周期的实体，
比如交易订单、物流订单等，对于实体的每 个实例，都会经历从诞生
到消亡等一系列步骤。对于商品、 用户等具有长生命周期的实体，
采用周期快照事实表更合适。

累积快照事实表的典型特征是多业务过程日期，用于计算业务过程
之间的时间间隔 。但结合阿里 巴巴数据仓库模型建设的经验，对于累积
快照事实表，还有一个重要作用是保存全量数据。对于淘宝交易，需要
保留历史截至当前的所有交易数据，其中 种方式是在 ODS 层保留和
源系统结构完全相同 的数据 但由于使用时需要关联维度，较为麻烦，
所以在公共明细层需要保留一份全量数据，淘宝交易累积快照事实表就
承担了这样的作用一一存放加工后的事实，并将各维度常用属性和订单
杂项维度退化到此表中。通常用于数据探查、统计分析、数据挖掘等。


11.4.4 物理实现

=============================================================
 