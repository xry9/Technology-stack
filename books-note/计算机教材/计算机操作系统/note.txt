=====================第一章=====================
1、操作系统是配置在计算机硬件上的第一层软件，是对硬件系统的首次扩充。如果用户想直接在计算机硬件上直接运行自己所编写的程序，就必须用机器语言编写

=====================第二章=====================
1、为了使参与并发执行的每个程序能独立地运行，在操作系统中必须为之配置一个专门的数据结构，称为进程控制块(Process Control Block)
2、进程的阻塞状态：正在执行的进程发生某些事件(I/O请求、申请缓存区失败等)暂时无法继续执行的状态，变即进程的执行受到阻塞。此时引起进程调度，OS把处理机(应该指器)分配给另外一个就绪进程
3、在许多系统中除了就绪、执行、阻塞外，为了系统和用户观察和分析进程的需要，还引入了对进程的挂起操作
  操起的原因：终端用户需要、父进程请求、负荷调节的需要、操作系统的需要
4、临界资源：许多硬件资源如打印机、磁带机等都属于临界资源，诸进程间采取互斥方式，实现对这种资源的共享
5、临界区：每个进程中访问临界资源的那段代码称为临界区
6、进程通信类型：
  共享存储系统(Shared-Memory System):内存中划出一块共享存储区域，诸进程可以对该共享区域读写交换信息
  管道通信系统：用于连接一个读进程和一个写进程，所谓Pipe 是一个共享文件
  消息传递系统：OS可提供发送命令(原语),直接把消息发送给目标进程
  远程过程调用/远程方法调用
7、操作系统引入进程目的使多个进程能并发执行。引入线程为了减少程序在并发执行时所付出的时空开销
  进程切换时空开销：对进程进行上下文切换时，需要保留当前进程的CPU环境，设置新选中进程的CPU环境
8、在传统的OS中，进程是作为独立调试和分派的基本单位，因而进程是能够独立运行的的基本单位。而引入线程，作为分派和调试的基本单位，因而线程是能够独立运行的基本单位。
  当线程切换时仅需保存和设置少量的寄存器内容，切换代价远低于进程。在一些操作系统中线程的切换、同步、通信都无需操作系统内核的干预
9、内核支持线程(Kernel Supported Threads)
  切换开销较大：从一个线程切换到另一个线程时，需要从用户态转到核心态进行，这是因为用户进程的线程在用户态运行，而线程调度和管理是在内核实现的
10、用户级线程：用户级线程是在用户空间实现的。线程的创建、销毁、同步与通信等功能都无需内核的支持。内核完全不知道这些线程的存在
  对于设置了用户级线程的系统，其调度仍是以进程为单位进行的，各进程轮流执行一个时间片，即线程数设多了也没用
  假如系统中设置的是内核支持线程，则调度便是以线程为单位进行的。
  缺点：
    基于进程机制的OS中，大多数系统调用将使进程阻塞，进程内所有线程都阻塞，而内核支持的线程不会
    单纯的用户级线程实现中，多线程应用不能利用多处理器进行多重处理的优点，内核分配给一个进程只有一个CPU。
  有些OS把用户级线程和内核支持线程进行组合

=====================第三章=====================
1、进程调度方式：
  非抢占式很难满足交互式作业和实时任务的需求。但抢占式比较复杂，系统开销也较大
  时间片大小的确实：时间片小意味着进行频繁的进程调度和上下文切换，所增加系统的开销。一个较为可取的时间片大小是略大于一次典型交互所需的时间，使大多数进程能在一个时间片内完成
  
=====================第四章=====================
1、主存储器与寄存器：
  处理机都是从主存储器中取得指令和数据的，并将其所取得的指令放入指令寄存器中，而将所取得的数据放入数据寄存器中。由于主存的访问速度远低于CPU执行指令的速度，为缓和这一 茅盾
  在计算机系统中引入是寄存器和高速缓存
  寄存器具有与处理机相同的速度，对寄存器的访问完全能与CPU协调工作
2、程序的装入和链接：
  编译：由编译程序对用户源程序进行编译，形成若干个目标模块
  链接：由链接程序将编译后的一组目标模块，以及他们所需要的库函数链接在一起，形成一个完整的装入模块
  装入：由装入模块将装入模块装入内存  
3、分页存储管理方式：
  连续分配方式会形成很多碎片，虽然可以通过“紧凑”的方式将许多碎片拼成可用的大块空间，但必须为之付出很大的开销。便出现了分布、分段、段页存储管理方式
  页面，分页存储管理将进程的逻辑地址空间分成若干页，并为各页加以编号，相应的把内存的物理地址空间分成若干个块，将进程中的若干个页分别装到多个可以不相邻的物理块中
4、地址结构：地址长度为32位，0~11 为页内地址，即每页大小为4KB,12~31为页号，最多允许有 1M 页
    页号P  | 位移量W
	31   12 11     0
5、页表：为保证进程能找到每个页面所对应的物理块，系统为每个进程建立了一张页面映像表
6、多级分页：没看明白

=====================第五章=====================
1、虚拟存储器作为现代操作系统中一项重要的技术，实现了内存扩充功能
2、虚拟存储器的基本工作情况：程序运行时仅需要将少量页面或段装入内存，其余部分暂留在盘上。程序运行时如果它所需要的页或段已调入内存便可继续执行下去，如果没在内存，OS
  会将其调入内存。如果内存已满OS还须再利用页（段）的置换功能，将内存中暂时不用的页（段）调至盘上

=====================第八章=====================
1、磁盘高速缓存：内存中为磁盘盘块设置的一个缓冲区，缓冲区中保存了某些盘块的副本
2、RAID: 系统利用一台磁盘阵列控制器来统一管理和控制一组磁盘驱动器，系统将每个盘块的数据分为若干个子盘块的数据，再把每个子盘块的数据分别存储到各个磁盘中的相同位置上
  优点：可靠性高，除了RAID0级外，其余各级都采用了容错技术。I/O 速度高，由于采用了并行交叉存取方式，可使磁盘速度提高 N-1 倍

=====================第十章=====================
1、CPU的时钟频率将受限于信号在介质上的传输时间，电子信号在真空中的传播速度是 30cm/ns，而在铜线或光纤中的速度大概是 20cm/ns。这意味着对于1GHz的计算机，信号路径长度
  不得超过20mm,对于100GHz的计算机则不能超过2mm。但是随着CPU体积的缩小，散热又成了一个棘手的问题
2、多处理器，为了使多个处理器协调工作，系统也必须为此付出一定的开销
3、自旋锁与信号量的主要差别：自旋锁可以避免调用进程阻塞。由于自旋锁使用者一般保持锁的时间非常短，调用进程用旋转代替进程切换。自旋锁所保护的临界区一般要比较短
