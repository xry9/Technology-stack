Java IO都有哪些设计模式，简单介绍一下。
考察点：装饰模式，适配器模式
https://juejin.im/post/5a2e4c49f265da430b7b3089


e. 设计模式的六大原则
1)开闭原则(Open Close Principle)
  开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果

3)依赖倒转原则(Dependence Inversion Principle)
这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。

4)接口隔离原则(Interface Segregation Principle)
这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发)
便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。

5)迪米特法则，又称最少知道原则(Demeter Principle)
最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。


========================================== 创建型模式 ==========================================
1、工厂模式
在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。

2、抽象工厂模式
抽象工厂模式(Abstract Factory Pattern)是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式
在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。
-- 也不用看例子了, 就是分两级么, 或者是把互不相干的工厂的创建统一到一处

3、单例模式(Singleton Pattern)
4)双检锁/双重校验锁(DCL，即 double-checked locking)
是否 Lazy 初始化：是
5)登记式/静态内部类
是否 Lazy 初始化：是
描述：这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，
双检锁方式可在实例域需要延迟初始化时使用。
-- 说下我的想法, 对象的初始化就是给属性赋值吧, 如果多个属性默认都是空值, 其实是否初始化对性能无损吧

6)枚举
是否 Lazy 初始化：否
描述：这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。
这种方式是 Effective Java 作者 Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。不过，由于 JDK1.5 之后才加入 enum 特性，用这种方式写不免让人感觉生疏，在实际工作中，也很少用。
不能通过 reflection attack 来调用私有构造方法。
经验之谈：一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。

4、建造者模式
建造者模式(Builder Pattern)使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。
一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。
意图：将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。
主要解决：主要解决在软件系统中，有时候面临着"一个复杂对象"的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。
何时使用：一些基本部件不会变，而其组合经常变化的时候。
--Builder 肯定比先 new 一个空类再 set 要好, 因为 Builder 不用先 new, 减少耦合

5、原型模式
原型模式(Prototype Pattern)是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。
这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。
意图：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。
如何解决：利用已有的一个原型对象，快速地生成和原型对象一样的实例。
关键代码： 1、实现克隆操作，在 JAVA 继承 Cloneable，重写 clone()，在 .NET 中可以使用 Object 类的 MemberwiseClone() 方法来实现对象的浅拷贝或通过序列化的方式来实现深拷贝。 2、原型模式同样用于隔离类对象的使用者和具体类型(易变类)之间的耦合关系，它同样要求这些"易变类"拥有稳定的接口。
--clone 依赖的是序列化吗, 好像不需要, 因为只需要 implements Cloneable 就行了。 hibernate 是不是用这个了

--工厂模式, 建造者模式 可以起到封装、解藕的效果

========================================== 结构型模式 ==========================================
1、适配器模式
适配器模式(Adapter Pattern)是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。
这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本来读取内存卡。
--原有两个接口(功能)互不相关, 为了实现在一个接口可以调用他俩, 先抽象出一个接口, 再实现他, 实现类里边调原有两个接口来适配, 适配器本质是个映射的功能
--可以想像一个适配 mysql/oracle 的接口, 可以认为是封装接口的接口

2、桥接模式
桥接(Bridge)是用于把抽象化与实现化解耦，使得二者可以独立变化。属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。

--实现类是通过调用桥接接口实现的, 把实现类的功能拆成多个子接口, 好处当然很多了, 起码是符合[接口隔离原则]
其实我觉得其实本来可以不放在一起的功能(可能是原来业务不复杂就放一起了), 放一起之后说我们可以把他俩拆开

3、过滤器模式
过滤器模式(Filter Pattern)或标准模式(Criteria Pattern)是一种设计模式，这种模式允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。这种类型的设计模式属于结构型模式，它结合多个标准来获得单一标准。
--本质是抽象出一个规则接口, 把条件组装好, 调用接口返回结果, 也是为了解耦

4、组合模式
是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。
这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。
我们通过下面的实例来演示组合模式的用法。实例演示了一个组织中员工的层次结构。
意图：将对象组合成树形结构以表示"部分-整体"的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。
主要解决：它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以像处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。
何时使用： 1、您想表示对象的部分-整体层次结构(树形结构)。 2、您希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。
--二叉树不就是这样搞的么

5、装饰器模式
装饰器模式(Decorator Pattern)允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。
这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。

意图：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。
主要解决：一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。
何时使用：在不想增加很多子类的情况下扩展类。
如何解决：将具体功能职责划分，同时继承装饰者模式。

-- 我怎么觉得和桥接模式很像呢
  是挺像, 都是两级功能, 只有一级实现类, 装饰器模式是装饰器作为第一级实现类, 在这里整合功能, 
  桥接模式是桥接口的实现类作为第二级实现类, 桥接口放在第一级实现类中被调用
  但是出发点不一样, 这里是在原有接口的基础上添加新功能, 加了第一级, 原先是顶级调第二级. 而桥是第一第二级在一起, 拆分一下

6、外观模式
外观模式(Facade Pattern)隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式
这种模式涉及到一个单一的类，【该类提供了客户端请求的简化方法和对现有系统类方法的委托调用】--这句话好像 hbase server 端的实现啊
如何解决：客户端不与系统耦合，外观类与系统耦合。
--其实不用我多解释了

7、享元模式
享元模式(Flyweight Pattern)主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。
主要解决：在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。
如何解决：用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象。
关键代码：用 HashMap 存储这些对象
-- MR 中的 key/value 就是这么回事吧, 只不过就两个对象不用 hashMap

8、代理模式
在代理模式(Proxy Pattern)中，一个类代表另一个类的功能
--跟外观模式有点像啊, 外观是在服务端做的, 代理是在客户端做(也多亏我读了那么多源码, 要不然这些设计模式看了也体会不深)
其实 java 的动态代理有点像外观模式, 可能是 AOP 中当外观来用, 但是 Hadoop RPC 并没有, 区别是是否传入一个实现类

========================================== 行为型模式 ==========================================
1、责任链模式
-- struct 的拦截器就是这个吧, 还有控制不同级别的日志打印

2、命令模式
请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令
-- 有个执行接口, 开发平台与调试系统就是这个模式呀, 我觉得多数场景参数是个 Builder 才好

3、解释器模式
这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。
意图：给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。
主要解决：对于一些固定文法构建一个解释句子的解释器。
何时使用：如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。
如何解决：构建语法树，定义终结符与非终结符。
--有点像我的梦想啊，命令/上下文 说的是一个意思吧, 可以认为是命令模式的一种特殊实现

4、迭代器模式
迭代器模式(Iterator Pattern)是 Java 和 .Net 编程环境中非常常用的设计模式。这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。
意图：提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。
主要解决：不同的方式来遍历整个整合对象。
何时使用：遍历一个聚合对象。
如何解决：把在元素之间游走的责任交给迭代器，而不是聚合对象。
关键代码：定义接口：hasNext, next。
应用实例：JAVA 中的 iterator。

6、中介者模式
中介者模式(Mediator Pattern)是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，
使代码易于维护。中介者模式属于行为型模式。
主要解决：对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理。
何时使用：多个类相互耦合，形成了网状结构。
如何解决：将上述网状结构分离为星型结构。
关键代码：对象 Colleague 之间的通信封装到一个类中单独处理。
应用实例： 1、中国加入 WTO 之前是各个国家相互贸易，结构复杂，现在是各个国家通过 WTO 来互相贸易。 2、机场调度系统。 3、MVC 框架，其中C(控制器)就是 M(模型)和 V(视图)的中介者。
--消息队列有点类似

7、备忘录模式
备忘录模式(Memento Pattern)保存一个对象的某个状态，以便在适当的时候恢复对象
意图：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。
主要解决：所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。
何时使用：很多时候我们总是需要记录一个对象的内部状态，这样做的目的就是为了允许用户取消不确定或者错误的操作，能够恢复到他原先的状态，使得他有"后悔药"可吃。
应用实例： 1、后悔药。 2、打游戏时的存档。 3、Windows 里的 ctri + z。 4、IE 中的后退。 4、数据库的事务管理。
-- 我也想到了事务处理, 

优点： 1、给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。 2、实现了信息的封装，使得用户不需要关心状态的保存细节。
缺点：消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。
使用场景： 1、需要保存/恢复数据的相关状态场景。 2、提供一个可回滚的操作。

8、观察者模式
当对象间存在一对多关系时，则使用观察者模式(Observer Pattern)。比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式。
何时使用：一个对象(目标对象)的状态发生改变，所有的依赖对象(观察者对象)都将得到通知，进行广播通知。
关键代码：在抽象类里有一个 ArrayList 存放观察者们。
--功能上类似责任链, 但是这里差别是观察者通知所有人

9、状态模式
在状态模式(State Pattern)中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。
在状态模式中，我们创建表示各种状态的对象和一个行为随着状态对象改变而改变的 context 对象
意图：允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。
主要解决：对象的行为依赖于它的状态(属性)，并且可以根据它的状态改变而改变它的相关行为。
何时使用：代码中包含大量与对象状态有关的条件语句。
--每种行为都依赖一种状态, 每种行为之后状态可能会改变, 所以需要很多 if 判断, 耦合了
Yarn 用的就是这个模式啊, 确实是少了很多 if else 判断

策略模式 VS 状态模式:
https://www.runoob.com/w3cnote/state-vs-strategy.html

10、空对象模式
在空对象模式(Null Object Pattern)中，一个空对象取代 NULL 对象实例的检查。Null 对象不是检查空值，而是反应一个不做任何动作的关系。这样的 Null 对象也可以在数据不可用的时候提供默认的行为。
在空对象模式中，我们创建一个指定各种要执行的操作的抽象类和扩展该类的实体类，还创建一个未对该类做任何实现的空对象类，该空对象类将无缝地使用在需要检查空值的地方。

11、策略模式:
在策略模式(Strategy Pattern)中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。
在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法
意图：定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换
主要解决：在有多种算法相似的情况下，使用 if...else 所带来的复杂和难以维护。
使用场景： 1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。 
  2、一个系统需要动态地在几种算法中选择一种。 3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。
鸭子案例体现了:多用组合，少用继承
public class Context {
   private Strategy strategy;
   public Context(Strategy strategy){ this.strategy = strategy; }
   public int executeStrategy(int num1, int num2){ return strategy.doOperation(num1, num2);}
}
--看完代码感觉也没有解决 if else 问题呀, 好像是把原用 if else 的复杂功能抽象到策略里
--滴滴哥们儿说线程池用了策略模式, 应该是指 RejectedExecutionHandler 的几个实现类 : 
AbortPolicy 中止策略 DiscardPolicy 抛弃策略 DiscardOldestPolicy抛弃旧任务策略 CallerRunsPolicy调用者运行

12、模板模式
public abstract class Game {
	abstract void initialize();
	abstract void startPlay();
	abstract void endPlay();
	public final void play(){
		initialize();
		startPlay();
		endPlay();
	}
}
-- 这也是设计模式啊, 不就是接口和实现类么, 没这么简单呀

13、访问者模式
--访问者是一个, 调用者是多个, 调用者把自身传入访问者, 访问者根据不同的调用者实现多态
开发平台的 execute 接口其实是这个模式, 当然说是命令模式也没错, 只不过命令是自身而已
PB rpc 是不是这个模式, 不是的话也得知道他是什么模式
org.apache.hadoop.hbase.io.hfile.HFile.Reader 也是典型的模板模式
