请简述一下线程池的运行流程，使用参数以及方法策略等
参考回答：
线程池主要就是指定线程池核心线程数大小，最大线程数，存储的队列，拒绝策略，空闲线程存活时长。当需要任务大于核心线程数时候，就开始把任务往存储任务的队列
里，当存储队列满了的话，就开始增加线程池创建的线程数量，如果当线程数量也达到了最大，就开始执行拒绝策略，比如说记录日志，直接丢弃，或者丢弃最老的任务。
1、corePoolSize(核心线程数)
(2)当线程数小于核心线程数的时候，即使有空闲线程，也会一直创建线程直到达到核心线程数；
4、keepAliveTime(线程空闲时间)
(1)当线程空闲时间达到 keepAliveTime 时，线程会退出(关闭)，直到线程数等于核心线程数；
5、rejectedExecutionHandler(任务拒绝处理器)
(1)当线程数量达到最大线程数，且任务队列已满时，会拒绝任务；
(2)调用线程池 shutdown()方法后，会等待执行完线程池的任务之后，再 shutdown()。如果在调用了shutdown()方法和线程池真正shutdown()之间提交任务，会拒绝新任务。
----
JDK1.8引入了 LongAdder 类。CAS 机制就是，在一个死循环内，不断尝试修改目标值，直到修改成功。如果竞争不激烈，那么修改成功的概率就很高，否则，
修改失败的的概率就很高，在大量修改失败时，这些原子操作就会进行多次循环尝试，因此性能就会受到影响。 结合ConcurrentHashMap的实现思想，应该可以想到对一种
传统 AtomicInteger 等原子类的改进思路, 也有一些低并发时不会立即进入分支做分段更新操作, 并发高时扩容的优化

----

不可重入自旋:
public class SpinLock {
	private AtomicReference<Thread> owner =new AtomicReference<>();
	public void lock(){
		Thread current = Thread.currentThread();
		while(!owner.compareAndSet(null, current)){
		}
	}
	public void unlock (){
		Thread current = Thread.currentThread();
		owner.compareAndSet(current, null);
	}
}
可重入自旋:
public class SpinLock1 {
	private AtomicReference<Thread> owner =new AtomicReference<>();
	private int count =0;
	public void lock(){
		Thread current = Thread.currentThread();
		if(current==owner.get()) {
			count++;
			return ;
		}
		while(!owner.compareAndSet(null, current)){
		}
	}
	public void unlock (){
		Thread current = Thread.currentThread();
		if(current==owner.get()){
			if(count!=0){
				count--;
			}else{
				owner.compareAndSet(current, null);
			}
		}
	}
}
----
请你说明一下 ConcurrentHashMap 的原理？
参考回答：
ConcurrentHashMap 类中包含两个静态内部类 HashEntry 和 Segment。HashEntry 用来封装映射表的键 / 值对；Segment 用来充当锁的角色，每个 Segment 对象守护
整个散列映射表的若干个桶。每个桶是由若干个 HashEntry 对象链接起来的链表。一个 ConcurrentHashMap 实例中包含由若干个 Segment 对象组成的数组。HashEntry 
用来封装散列映射表中的键值对。在 HashEntry 类中，key，hash 和 next 域都被声明为 final 型，value 域被声明为 volatile 型。
... 细看书 https://www.nowcoder.com/tutorial/94/4e79fb9392af4f90b898311e8c1efe36

请你说明concurrenthashmap有什么优势以及1.7和1.8区别？
参考回答：
Concurrenthashmap线程安全的，1.7是在jdk1.7中采用Segment + HashEntry的方式进行实现的，lock加在Segment上面。1.7size计算是先采用不加锁的方式，
连续计算元素的个数，最多计算3次：1、如果前后两次计算结果相同，则说明计算出来的元素个数是准确的；
2、如果前后两次计算结果都不同，则给每个Segment进行加锁，再计算一次元素的个数；

1.8 中放弃了 Segment 臃肿的设计，取而代之的是采用 Node + CAS + Synchronized 来保证并发安全进行实现，1.8中使用一个volatile类型的变量baseCount记录元素的个数，
当插入新数据或则删除数据时，会通过addCount()方法更新baseCount，通过累加baseCount和CounterCell数组中的数量，即可得到元素的总个数；
----
请解释一下TreeMap?
参考回答：
TreeMap是一个有序的key-value集合，基于红黑树(Red-Black tree)的 NavigableMap 实现
--百度百科 红黑树居然很多用途啊
请你说明一下TreeMap的底层实现？
参考回答：
TreeMap 的实现就是红黑树数据结构，也就说是一棵自平衡的排序二叉树，这样就可以保证当需要快速检索指定节点。
----
HashMap的容量为2^n的原因是：
1)对key的hash取余效率更高。因为当length是2的n次方的时候： hash % length == hash & (length - 1)。位运算的效率比直接取余的效率会高很多。
2)扩容resize()的时候，原来哈希表中，有接近一半的节点的下标是不变的，而另外的一半的下标为 原来的length + 原来的下标。具体要看hash值对应扩容后的某一位是0还是1.
static final int hash(Object key) {int h;return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);}
----
上一下源码:
public class Collections {
	public static <T extends Comparable<? super T>> void sort(List<T> list) {
		Object[] a = list.toArray();
		Arrays.sort(a);
		ListIterator<T> i = list.listIterator();
		for (int j=0; j<a.length; j++) {
			i.next();
			i.set((T)a[j]);
		}
	}
}
public class LinkedList<E> extends AbstractSequentialList<E> implements List<E>, Deque<E>, Cloneable, java.io.Serializable{
	private static class Node<E> {// 他比 ArrayList(一个引用) 多了一个引用还多了一个 Node 对象头, 不同的是 ArrayList 需要一个大段连续空间
		E item;
		Node<E> next;
		Node<E> prev;
		Node(Node<E> prev, E element, Node<E> next) {
			this.item = element;
			this.next = next;
			this.prev = prev;
		}
	}
	public Object[] toArray() {
		Object[] result = new Object[size];
		int i = 0;
		for (Node<E> x = first; x != null; x = x.next) result[i++] = x.item;
		return result;
	}
}
----
请说说快速失败(fail-fast)和安全失败(fail-safe)的区别？
参考回答：
Iterator的安全失败是基于对底层集合做拷贝，因此，它不受源集合上修改的影响。java.util包下面的所有的集合类都是快速失败的，而java.util.concurrent包下面的所有的类都是安全失败的。快速失败的迭代器会抛出ConcurrentModificationException异常，而安全失败的迭代器永远不会抛出这样的异常。
a. fail-fast：
java.util.AbstractList#modCount
java.util.ArrayList#add /#remove 都会有 modCount++;
而 java.util.ArrayList.Itr#expectedModCount 值只有下面这两个方法更改了, 即 expectedModCount = modCount;
java.util.ArrayList.Itr#remove
java.util.ArrayList.ListItr#add
b. fail-safe
  fail-safe:这种遍历基于容器的一个克隆。对容器内容的修改不影响遍历。java.util.concurrent包下的容器都是安全失败的,可以在多线程下并发使用,并发修改。
  常见的的使用fail-safe方式遍历的容器有 ConcerrentHashMap 和 CopyOnWriteArrayList 等。
  -- 经我观察, 在于 ConcurrentHashMap 返回的迭代器是弱一致性, 不检查而已(是不是因为是线程安全的才这样做, fail-safe 好像跟线程安全有点关系), 
  CopyOnWriteArrayList 同样不检察, 但即便检查也没有用的哈
public class CopyOnWriteArrayList<E> implements List<E>, RandomAccess, Cloneable, java.io.Serializable {
	public boolean add(E e) {
		final ReentrantLock lock = this.lock;
		lock.lock();
		try {
			Object[] elements = getArray();
			int len = elements.length;
			Object[] newElements = Arrays.copyOf(elements, len + 1);
			newElements[len] = e;
			setArray(newElements);
			return true;
		} finally {
			lock.unlock();
		}
	}
	final Object[] getArray() {
		return array;
	}
}
----
Java中static方法不能被覆盖，因为方法覆盖是基于运行时动态绑定的，而static方法是编译时静态绑定的。static方法跟类的任何实例都不相关，所以概念上不适用。
----
子类函数的访问修饰权限不能少于父类的? 这是为什么呢, 不安全呀

----
Object()默认构造方法。clone() 创建并返回此对象的一个副本
protected native Object clone() throws CloneNotSupportedException;
----
请解释一下String为什么不可变？
参考回答：

我说一下: 
String str = "zs"; 
if("zs".equals(str)){...} 如果 String 是可变的, str 指向的值就可能不是 "zs" 了, 我觉得就是这个原因
下面应该是 String 不可变带来的好处:
  只有当字符串是不可变时字符串池才有可能实现，字符串池的实现可以在运行时节约很多 heap 空间(当然我觉得支持字符串在栈上分配其实也不用字符串池)，
因为不同的字符串变量都指向池中的同一个字符串；
因为字符串是不可变的，所以是多线程安全的，同一个字符串实例可以
被多个线程共享，这样便不用因为线程安全问题而使用同步，字符串自己便是线程安全的；

因为字符串是不可变的所以在它创建的时候 hashcode 就被缓存了，不变性也保证了 hash 码的唯一性，不需要重新计算，字符串的处理速度要快过其它的键对象，
我觉得说得不深刻, 其它类型如果不重写 hashCode 方法也是一样的, 但是往往不得不重写
----
请你讲讲wait方法的底层原理
参考回答：
ObjectSynchronizer::wait 方法通过object的对象中找到 ObjectMonitor, 通过ObjectMonitor::AddWaiter 调用把新建立的ObjectWaiter对象放入到 _WaitSet 
的队列的末尾中然后在ObjectMonitor::exit释放锁，接着 thread_ParkEvent->park 也就是wait。
-- 所以说锁对象是要有两个队列的

----
public class ArrayList<E> extends AbstractList<E> implements List<E>, RandomAccess, Cloneable, java.io.Serializable{
    public void sort(Comparator<? super E> c) {
        final int expectedModCount = modCount;
        Arrays.sort((E[]) elementData, 0, size, c);// 我跟了一下, 里面好像没有用到 equals 啊
        if (modCount != expectedModCount) {throw new ConcurrentModificationException();}
        modCount++;
    }
}
public class Arrays {
	public static void sort(Object[] a) {
		ComparableTimSort.sort(a, 0, a.length, null, 0, 0);// 会强转 Comparable
	}
	public static <T> void sort(T[] a, int fromIndex, int toIndex, Comparator<? super T> c) {
		TimSort.sort(a, fromIndex, toIndex, c, null, 0, 0);
	}
}

----
请解释一下extends 和super 泛型限定符
https://www.nowcoder.com/tutorial/94/f5c9640c0b9a4891bc507615f1ffe170
----
请说明内部类可以引用他包含类的成员吗，如果可以，有没有什么限制吗？
参考回答：
一个内部类对象可以访问创建它的外部类对象的内容，内部类如果不是static的，那么它可以访问创建它的外部类对象的所有属性内部类如果是sattic的，
即为nested class，那么它只可以访问创建它的外部类对象的所有static属性 一般普通类只有public或package的访问修饰，而内部类可以实现static，protected，
private等访问修饰。当从外部类继承的时候，内部类是不会被覆盖的，它们是完全独立的实体，每个都在自己的命名空间内，如果从内部类中明确地继承，就可以覆盖
原来内部类的方法。

请你说说Static Nested Class 和 Inner Class的不同
考回答：
Static Nested Class是被声明为静态(static)的内部类，它可以不依赖于外部类实例被实例化。而通常的内部类需要在外部类实例化后才能实例化。Static-Nested Class 
的成员, 既可以定义为静态的(static), 也可以定义为动态的(instance).Nested Class的静态成员(Method)只能对Outer Class的静态成员(static memebr)进行操作
(ACCESS), 而不能Access Outer Class的动态成员(instance member).而 Nested Class的动态成员(instance method) 却可以 Access Outer Class的所有成员, 
这个概念很重要, 许多人对这个概念模糊. 有一个普通的原则, 因为静态方法(static method) 总是跟 CLASS 相关联(bind CLASS), 而动态方法( (instance method) 
总是跟 instance object 相关联, 所以,静态方法(static method)永远不可以Access跟 object 相关的动态成员(instance member),反过来就可以, 
一个CLASS的 instance object 可以 Access 这个 Class 的任何成员, 包括静态成员(static member).
----
请你解释什么是值传递和引用传递
参考回答：
值传递是对基本型变量而言的,传递的是该变量的一个副本,改变副本不影响原变量.
引用传递一般是对于对象型变量而言的,传递的是该对象地址的一个副本, 并不是原对象本身 。 所以对引用对象进行操作会同时改变原对象.
一般认为,java内的传递都是值传递.
-- 这个例子足以证明是值传递了, 还涉及不到引用和指针的区别, 但是也说一下：指针变量存储的是另一个变量的地址。引用变量指向另外一个变量
有人这样解释: java永远只有值传递，引用传递其实也是一个值传递，他传递是一个地址的副本. 我觉得挺好的
说白了实参都是形参的拷贝

public static void main(String[] args) {
	String str = "abc";
	ff(str);
	System.out.println(str);// "abc"
}
public static void ff(String s){
//        s = "ABC";// 同样
	s = new String("ABC");
}

----
请你介绍一下volatile？
参考回答：
加了volatile关键字的代码生成的汇编代码发现，会多出一个lock前缀指令。
Lock指令对Intel平台的CPU，早期是锁总线，这样代价太高了，后面提出了缓存一致性协议，MESI，来保证了多核之间数据不一致性问题。
----
1. 范围
  float和double的范围是由指数的位数来决定的。
  float的指数位有8位，而double的指数位有11位，分布如下：
  float：
  1bit（符号位） 8bits（指数位） 23bits（尾数位）
  double：
  1bit（符号位） 11bits（指数位） 52bits（尾数位）
  于是，float的指数范围为-127~+128，而double的指数范围为-1023~+1024，并且指数位是按补码的形式来划分的。
  其中负指数决定了浮点数所能表达的绝对值最小的非零数；而正指数决定了浮点数所能表达的绝对值最大的数，也即决定了浮点数的取值范围。
  float的范围为-2^128 ~ +2^128，也即-3.40E+38 ~ +3.40E+38；double的范围为-2^1024 ~ +2^1024，也即-1.79E+308 ~ +1.79E+308。

2.  精度
  float和double的精度是由尾数的位数来决定的。浮点数在内存中是按科学计数法来存储的，其整数部分始终是一个隐含着的“1”，由于它是不变的，故不能对精度造成影响。
  float：2^23 = 8388608，一共七位，这意味着最多能有7位有效数字，但绝对能保证的为6位，也即float的精度为6~7位有效数字；
  double：2^52 = 4503599627370496，一共16位，同理，double的精度为15~16位。
BigDecimal
----
请你说明String 和StringBuffer的区别
public final class String implements java.io.Serializable, Comparable<String>, CharSequence {
    private final char value[];// String 不可变只因为这块吧，而且类内部没有修改 value 的操作
    public String toString() { return this; }
	public String(char value[], int offset, int count) {
        this.value = Arrays.copyOfRange(value, offset, offset+count);
    }
}
public class java.io.BufferedReader extends Reader {
	private char cb[];
	String readLine(boolean ignoreLF) throws IOException {
		String str;
		str = new String(cb, startChar, i - startChar);
		return str;
	}
}
-- 看完这两个类对 Sting 还会有什么疑问么, 常量池中只是常量的字符串和 intern() 进去的吧
如果字符串是可变的话，通过一个引用改变它的值，将会导致其他引用的值也同样改变，从而可能发生错误

----
integer的值在-128至127之间，则是去缓存里面获取, == 结果为 true, 但是 new Integer(2) 这样创建还是不会, 而是要 Integer integer1 = 11;
----
请你谈谈DNS的寻址过程：
1、在浏览器中输入www.qq.com域名，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。
2、如果hosts里没有这个域名的映射，则查找本地DNS解析器缓存，是否有这个网址映射关系，如果有，直接返回，完成域名解析。
3、如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，首先会找TCP/ip参数中设置的首选DNS服务器，在此我们叫它本地DNS服务器，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性
4、...
5、如果本地DNS服务器本地区域文件与缓存解析都失效，则根据本地DNS服务器的设置（是否设置转发器）进行查询，如果未用转发模式，本地DNS就把请求发至13台根DNS，根DNS服务器收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该顶级域名服务器的一个IP。本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS服务器地址(qq.com)给本地DNS服务器。当本地DNS服务器收到这个地址后，就会找qq.com域服务器，重复上面的动作，进行查询，直至找到www.qq.com主机。
----
请你简单讲解一下，负载均衡 反向代理模式的优点、缺点:
（1）反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给
  internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。
（3）反向代理负载均衡能以软件方式来实现，如apache mod_proxy、netscape proxy等，也可以在高速缓存器、负载均衡器等硬件设备上实现。
  反向代理负载均衡可以将优化的负载均衡策略和代理服务器的高速缓存技术结合在一起，提升静态网页的访问速度，提供有益的性能；由于网络外部用户不能直接访问
  真实的服务器，具备额外的安全性（同理，NAT负载均衡技术也有此优点）。
  -- 我总结一下就是负载均衡和动静分离呗, 原本静态资源要通过下面服务器获取, 现在不用打到下面服务器了
（4）其缺点主要表现在以下两个方面
针对每一次代理，代理服务器就必须打开两个连接，一个对外，一个对内，因此在并发连接请求数量非常大的时候，代理服务器的负载也就非常大了，
  在最后代理服务器本身会成为服务的瓶颈
--
正向代理,也就是传说中的代理,他的工作原理就像一个跳板。简单的说,我是一个用户,我访问不了某网站,但是我能访问一个代理服务器,这个代理服务器呢,
他能访问那个我不能访问的网站,于是我先连上代理服务器,【告诉他我需要那个】无法访问网站的内容,代理服务器去取回来,然后返回给我
反向代理.举例:
例用户访问 http://ooxx/readme但ooxx上并不存在readme页面他是偷偷从另外一台服务器上取回来,然后作为自己的内容吐给用户
反向代理，对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理 的命名空间(name-space)中的内容发送普通请求，
接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端，就像这些内容 原本就是它自己的一样。
----
需要注意的是，HashMap在JDK1.8的版本中引入了红黑树结构做优化，当链表元素个数大于等于8时，自身链表转换成树结构；
因为红黑树的平均查找长度是log(n)，长度为8的时候，平均查找长度为3，如果继续使用链表，8/2=4

jdk1.7:
public class java.util.HashMap<K,V> extends AbstractMap<K,V> implements Map<K,V>, Cloneable, Serializable{
	void createEntry(int hash, K key, V value, int bucketIndex) {
		Entry<K,V> e = table[bucketIndex];
		table[bucketIndex] = new Entry<>(hash, key, value, e);// 和我想的一样新值放链表的头节点, 不光是成环, 也可能数据丢失啊
		size++;
	}
	void transfer(Entry[] newTable, boolean rehash) {
        int newCapacity = newTable.length;
        for (Entry<K,V> e : table) {
            while(null != e) {
                Entry<K,V> next = e.next;
                if (rehash) {
                    e.hash = null == e.key ? 0 : hash(e.key);
                }
                int i = indexFor(e.hash, newCapacity);
				// 移过去之后相当于把链表顺序倒转了, 成环也这几千代码造成的, 品吧
                e.next = newTable[i];
                newTable[i] = e;
                e = next;
            }
        }
    }
	static int indexFor(int h, int length) {
		// assert Integer.bitCount(length) == 1 : "length must be a non-zero power of 2";
		return h & (length-1);
	}
	final int hash(Object k) {
        int h = hashSeed;
        if (0 != h && k instanceof String) {// 这是用字符串做 key 比其它快的原因, 但是 jdk1.8 中不是这样的
            return sun.misc.Hashing.stringHash32((String) k);
        }
        h ^= k.hashCode();
        h ^= (h >>> 20) ^ (h >>> 12);
        return h ^ (h >>> 7) ^ (h >>> 4);
    }
    private void inflateTable(int toSize) {// 第一次 put 发现 table 是空进会调用
        int capacity = roundUpToPowerOf2(toSize);// 转成二进制, 但是 ArrayList 却不是这样, 既传多少就是多少
        threshold = (int) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + 1);
        table = new Entry[capacity];
        initHashSeedAsNeeded(capacity);
    }

}
----
请你说一下，B+树和B-树？
考察点：树
参考回答：
b+树的中间节点不保存数据，所以磁盘页能容纳更多节点元素，更“矮胖”；
b+树查询必须查找到叶子节点，b树只要匹配到即可不用管元素位置，因此b+树查找更稳定（并不慢）；
对于范围查找来说，b+树只需遍历叶子节点链表即可，b树却需要重复地中序遍历【这点很重要啊】
----
我发现 jdk1.8 内部类引用外部变量不用 final 了
