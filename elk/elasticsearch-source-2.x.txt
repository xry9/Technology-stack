https://github.com/elastic/elasticsearch/
mvn clean package -DskipTests && cp target/elasticsearch-2.0.3-SNAPSHOT.jar /usr/local/app/elasticsearch-2.0.3-1/lib/elasticsearch-2.0.3-SNAPSHOT.jar && cp target/elasticsearch-2.0.3-SNAPSHOT.jar /usr/local/app/elasticsearch-2.0.3-2/lib/elasticsearch-2.0.3-SNAPSHOT.jar && cp target/elasticsearch-2.0.3-SNAPSHOT.jar /usr/local/app/elasticsearch-2.0.3-3/lib/elasticsearch-2.0.3-SNAPSHOT.jar 

git clone -b 1.2 https://github.com/elastic/elasticsearch.git

--------
gradle -version
Gradle 5.4
JVM:          1.8.0_77
----
git clone -b 6.0 https://github.com/elastic/elasticsearch.git
./gradlew assemble
./gradlew idea

v6.3.0, v6.4.2, jdk 用 10.0.2, 亦可
----
安装 lucene: 在源码 ivy-versions.properties 中找到ivy 版本, 到 maven 中下载一下放入 ${HOME}/.ant/lib, 执行 ant 即可
apache mirror(https://archive.apache.org/dist/lucene/java/7.4.0/lucene-7.4.0-src.tgz) 上下载的 lucene 与 github 上的不一样, 居然还有 join 模块

http.port: 9600
transport.tcp.port: 9700
path.data: /Users/fintopia/app/elasticsearch-6.4.2-3/data
path.logs: /Users/fintopia/app/elasticsearch-6.4.2-3/logs
discovery.zen.ping.unicast.hosts: ["127.0.0.1:9300", "127.0.0.1:9500", "127.0.0.1:9700"]

kill -9 $(ps -ef|grep Elasticsearch |gawk '$0 !~/grep/ {print $2}' |tr -s '\n' ' ')

http://192.168.58.141:9200/_cat/health?v
http://192.168.58.141:9200/_cat/indices?v
http://192.168.58.141:9200/usermanage/user/_search?q=id=1
============================================




--------------------------------------------

bindServerBootstrap===429|bindAddress===281
sendResponse===97
handleRequest===238|sendResponse===82, server: 接收 request 并返回 response
sendRequest===286|messageReceived===112===false, client:发送 request 和接收本 request 和 response
sendRequest===756|handleRequest===238, client 发送与 server 接收

tail -f logs/es.log | grep -E "sendRequest===756|sendLocalRequest===339|messageReceived===115"


http: 
registerHandler===116
sendResponse===77|messageReceived===58
--------------------------------------------
org.elasticsearch.indices.cluster.IndicesClusterStateService#findSourceNodeForPeerRecovery 这个方法很重要

cluster:monitor/nodes/stats: master 收集节点的磁盘等信息
indices:monitor/stats 同上, 收集 shard 的信息
internal:index/shard/recovery/start_recovery, 在方法 org.elasticsearch.indices.recovery.RecoveryTarget#doRecovery, 相当于本 shard 节点告诉主 shard 节点, 来向我发起 recovery 请示
  在主 shard 节点中, org.elasticsearch.indices.recovery.RecoverySourceHandler#recoverToTarget 方法完成操作, phase1 phase2 finalizeRecovery 等. 
internal:index/shard/recovery/prepare_translog, 是响应 internal:index/shard/recovery/start_recovery 后的操作, 会启动 InternalEngine。在 phase1 中调用
  见 org.elasticsearch.indices.recovery.RecoverySourceHandler#prepareTargetForTranslog 中注释
  internal:index/shard/recovery/filesInfo 是 phase1 中操作
internal:index/shard/recovery/finalize 在 finalizeRecovery 方法中发送请示
internal:discovery/zen/join, 从节点向 master 节点发请示
internal:discovery/zen/join/validate master 节点返回给从节点
internal:cluster/shard/started 向 master 发送 shard 信息, 到 master 好像也没干啥呀
internal:discovery/zen/unicast ping 了一下, master 选举时需要依赖于此, [并不是在 server 端生效, 而是在 client handleResponse. findMaster 也调用

internal:gateway/local/started_shards, 调用 nodes(几个不确定) shard 的 Store.tryOpenIndex (org.elasticsearch.gateway.TransportNodesListGatewayStartedShards#nodeOperation)
internal:cluster/nodes/indices/shard/store, 与 started_shards 类似 
internal:discovery/zen/publish, master 节点调用另两个节点,  if (newClusterState.nodes().localNodeMaster()) { discoveryService.publish(clusterChangedEvent, ackListener); }

internal:indices/flush/synced/pre, 在 org.elasticsearch.indices.IndicesLifecycle.Listener#onShardInactive 中 shard 是 primary 会调用, 在 server 端 indexShard.flush
internal:indices/flush/synced/sync 在 pre 的 listener 中被调用
internal:discovery/zen/fd/master_ping 非 master 节点向 master 节点发送, clent 有一个线程 MasterPinger
internal:discovery/zen/fd/ping 与上相反
cluster:monitor/nodes/liveness client 连接时用到
internal:gateway/local/meta_state GatewayService start 调用
checkPendingJoinsAndElectIfNeeded===237 是 node master 被先出来, 本质还是在上面的日志 "elected as master task already submitted"

shard 选举开始是在 org.elasticsearch.gateway.GatewayService#doStart 中, 如果 node 是 master 才往下走, 完成是在 org.elasticsearch.cluster.routing.ShardRouting#newUnassigned
分配 node 是在 org.elasticsearch.cluster.action.shard.ShardStateAction#shardStartedOnMaster, 即 internal:cluster/shard/started 的 handler 中调用
  日志: allocating [{}] to [{}] on primary allocation

ClusterState.nodes 实在太重要是, 但是增加 node 应该是在 org.elasticsearch.cluster.node.DiscoveryNodes.Builder#put , 除了本地增加就是 ProcessJoinsTask 中, 溯源还是 JoinRequestRequestHandler 中添加的

start===147,         
less logs/elasticsearch.log | grep -E -A 15 "executeFetch===112"

org.elasticsearch.cluster.routing.IndexShardRoutingTable#activeInitializingShardsIt 对 shards 有打散的操作
第二阶段请求: indices:data/read/search[phase/query] 第二阶段请求: indices:data/read/search[phase/fetch/id]

集群的 ClusterState 是关键, put===635(三行数据的是 master), execute===3 是 ClusterState 的关键
Create===766, allocateUnassigned===97(选举出 primary shard)
org.elasticsearch.action.support.replication.TransportReplicationAction.PrimaryPhase#finishAndMoveToReplication, primary shard 写完后会执行
-- master 在 3, 但是 primary shard 只有一个在 3, 其它在 1

getFromSearcher===236
java api 会到 MessageChannelHandler#messageReceived 中, 不走 http 

clientBootstrap===

这行代码: this.nodeId = nodeId.intern();
curl -XPUT 'http://localhost:9200/usermanage/_settings' -H 'Content-Type: application/json' -d '
{
"index" : {
"number_of_replicas" : 3
}
}'
------------------------
indices:data/write/index registerRequestHandler 是在 TransportReplicationAction, rpc 部分就可以串起来了
org.elasticsearch.index.engine.InternalEngine#innerCreateNoLock 写入在这里
org.elasticsearch.cluster.routing.OperationRouting#shardId 中 hash

org.elasticsearch.action.search.TransportSearchAction#doExecute 读操作
	org.elasticsearch.search.internal.ContextIndexSearcher#search 第一阶段读操作
	org.elasticsearch.search.fetch.FetchPhase#loadStoredFields 第二阶段根据 docId 读取数据
executeFetch===112|executeFetchPhase===593

-- 这种代码有点意思 transportService.registerRequestHandler(actionName, request, ThreadPool.Names.SAME, new OperationTransportHandler()); OperationTransportHandler 是 abstract class TransportReplicationAction 的内部类, 会调用外部类方法。所以我想说的是会有隐式传参


org.elasticsearch.action.search.type.TransportSearchTypeAction.BaseAsyncAction#performFirstPhase 方法的 
  sendExecuteFirstPhase(node, internalSearchRequest(shard, shardsIts.size(), request, filteringAliases, startTime()), new ActionListener<FirstResult>() {}); 调用很重要

public final class org.elasticsearch.bootstrap.Elasticsearch {
    public static void main(String[] args) throws StartupError {
        Bootstrap.init(args);
    }
}

final class org.elasticsearch.bootstrap.Bootstrap {
    static void init(String[] args) throws Throwable {
        BootstrapCLIParser bootstrapCLIParser = new BootstrapCLIParser();
        CliTool.ExitStatus status = bootstrapCLIParser.execute(args);
        INSTANCE = new Bootstrap();
        Environment environment = initialSettings(foreground);
        Settings settings = environment.settings();
        if (JvmInfo.jvmInfo().getVmName().toLowerCase(Locale.ROOT).contains("client")) {
            ESLogger logger = Loggers.getLogger(Bootstrap.class);
            logger.warn("jvm uses the client vm, make sure to run `java` with the server vm for best performance by adding `-server` to the command line");
        }
        JVMCheck.check();
        INSTANCE.setup(true, settings, environment);
        INSTANCE.start();
    }
    private void setup(boolean addShutdownHook, Settings settings, Environment environment) throws Exception {
        initializeNatives(settings.getAsBoolean("bootstrap.mlockall", false), settings.getAsBoolean("bootstrap.ctrlhandler", true));
        initializeProbes();
        JarHell.checkJarHell();
        setupSecurity(settings, environment);
        Settings nodeSettings = Settings.settingsBuilder().put(settings).put(InternalSettingsPreparer.IGNORE_SYSTEM_PROPERTIES_SETTING, true).build();
        NodeBuilder nodeBuilder = NodeBuilder.nodeBuilder().settings(nodeSettings);
        node = nodeBuilder.build();
    }
    private void start() {
        node.start();
        keepAliveThread.start();
    }
}
public class org.elasticsearch.node.Node implements Releasable {
    public Node(Settings preparedSettings) {
        final Settings pSettings = settingsBuilder().put(preparedSettings).put(Client.CLIENT_TYPE_SETTING, CLIENT_TYPE).build();
        Environment tmpEnv = InternalSettingsPreparer.prepareEnvironment(pSettings, null);
        Settings tmpSettings = TribeService.processSettings(tmpEnv.settings());
        Version version = pSettings.getAsVersion("tests.mock.version", Version.CURRENT);
        this.pluginsService = new PluginsService(tmpSettings, tmpEnv.pluginsFile());
        this.settings = pluginsService.updatedSettings();
        this.environment = new Environment(this.settings());
        final NodeEnvironment nodeEnvironment;
        nodeEnvironment = new NodeEnvironment(this.settings, this.environment);
        final ThreadPool threadPool = new ThreadPool(settings);
        boolean success = false;
        ModulesBuilder modules = new ModulesBuilder();
        modules.add(new Version.Module(version));
        modules.add(new CircuitBreakerModule(settings));
        for (Module pluginModule : pluginsService.nodeModules()) {
            modules.add(pluginModule);
        }
        modules.add(new PluginsModule(pluginsService));
        modules.add(new SettingsModule(this.settings));
        modules.add(new NodeModule(this));
        modules.add(new NetworkModule());
        modules.add(new ScriptModule(this.settings));
        modules.add(new EnvironmentModule(environment));
        modules.add(new NodeEnvironmentModule(nodeEnvironment));
        modules.add(new ClusterNameModule(this.settings));
        modules.add(new ThreadPoolModule(threadPool));
        modules.add(new DiscoveryModule(this.settings));
        modules.add(new ClusterModule(this.settings));
        modules.add(new RestModule(this.settings));
        modules.add(new TransportModule(settings));
        if (settings.getAsBoolean(HTTP_ENABLED, true)) {
            modules.add(new HttpServerModule(settings));
        }
        modules.add(new IndicesModule(settings));
        modules.add(new SearchModule(settings));
        modules.add(new ActionModule(false));
        modules.add(new MonitorModule(settings));
        modules.add(new GatewayModule(settings));
        modules.add(new NodeClientModule());
        modules.add(new ShapeModule());
        modules.add(new PercolatorModule());
        modules.add(new ResourceWatcherModule());
        modules.add(new RepositoriesModule());
        modules.add(new TribeModule());
        pluginsService.processModules(modules);
        injector = modules.createInjector();
        client = injector.getInstance(Client.class);
        threadPool.setNodeSettingsService(injector.getInstance(NodeSettingsService.class));
    }
    public Node start() {
        injector.getInstance(Discovery.class).setRoutingService(injector.getInstance(RoutingService.class));
        for (Class<? extends LifecycleComponent> plugin : pluginsService.nodeServices()) {
            injector.getInstance(plugin).start();
        }
        injector.getInstance(MappingUpdatedAction.class).setClient(client);
        injector.getInstance(IndicesService.class).start();// 好像没起动一个线程
        injector.getInstance(IndexingMemoryController.class).start();// 实时监控 shard 状态, 
        injector.getInstance(IndicesClusterStateService.class).start();// 做为一个 Listion 加到了 ClusterService 中
        injector.getInstance(IndicesTTLService.class).start();// 大概是个插件功能
        injector.getInstance(SnapshotsService.class).start();// 做为 TransportCreateSnapshotAction 的工具对象
        injector.getInstance(SnapshotShardsService.class).start();// 工具对象
        injector.getInstance(TransportService.class).start();// 启动了 NettyTransport
        injector.getInstance(ClusterService.class).start();// 内容太多
        injector.getInstance(RoutingService.class).start();//
        injector.getInstance(SearchService.class).start();//被调用, 分了多个阶段
        injector.getInstance(MonitorService.class).start();// jvmMonitorService
        injector.getInstance(RestController.class).start();//
        injector.getInstance(GatewayAllocator.class).setReallocation(injector.getInstance(ClusterService.class), injector.getInstance(RoutingService.class));
        DiscoveryService discoService = injector.getInstance(DiscoveryService.class).start();
        discoService.waitForInitialState();
        injector.getInstance(GatewayService.class).start();// 自身做为 clusterService 的插件
        if (settings.getAsBoolean("http.enabled", true)) {
            injector.getInstance(HttpServer.class).start();
        }
        injector.getInstance(ResourceWatcherService.class).start();
        injector.getInstance(TribeService.class).start();
        return this;
    }
}
public class com.xry9.elasticsearch.EsClient {
    private void buildClient() {
        Settings settings = Settings.settingsBuilder().put("cluster.name", esEnv.getClusterName()).put("transport.tcp.compress", true).build();
        client = TransportClient.builder().settings(settings).build().addTransportAddresses(addressArr);
    }
}
public class com.xry9.elasticsearch.EsUserImpl extends AbstractEntityService<User>implements EsUserService {
    public void singleInsert(User user) {
        flag = esclient.getIndexRequestBuilder().setIndex(indexName).setType(typeName).setSource(this.buildEntity(user)).execute().actionGet().isCreated();
        esclient.esRefresh();
    }
}
public class org.elasticsearch.client.transport.TransportClient extends AbstractClient {
    public TransportClient addTransportAddresses(TransportAddress... transportAddress) {
        nodesService.addTransportAddresses(transportAddress);
        return this;
    }
    protected <Request extends ActionRequest, Response extends ActionResponse, RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>> void doExecute(Action<Request, Response, RequestBuilder> action, Request request, ActionListener<Response> listener) {
        proxy.execute(action, request, listener);
    }
}

public class org.elasticsearch.client.transport.TransportClientNodesService extends AbstractComponent {
    public TransportClientNodesService addTransportAddresses(TransportAddress... transportAddresses) {
        synchronized (mutex) {
            List<TransportAddress> filtered = Lists.newArrayListWithExpectedSize(transportAddresses.length);
            for (TransportAddress transportAddress : transportAddresses) {
                boolean found = false;
                for (DiscoveryNode otherNode : listedNodes) {
                    if (otherNode.address().equals(transportAddress)) {
                        found = true;
                        logger.debug("address [{}] already exists with [{}], ignoring...", transportAddress, otherNode);
                        break;
                    }
                }
                if (!found) {
                    filtered.add(transportAddress);
                }
            }
            ImmutableList.Builder<DiscoveryNode> builder = ImmutableList.builder();
            builder.addAll(listedNodes());
            for (TransportAddress transportAddress : filtered) {
                DiscoveryNode node = new DiscoveryNode("#transport#-" + tempNodeIdGenerator.incrementAndGet(), transportAddress, minCompatibilityVersion);
                builder.add(node);
            }
            listedNodes = builder.build();
            nodesSampler.sample();
        }
        return this;
    }
    abstract class NodeSampler {
        public void sample() {
            synchronized (mutex) {
                if (closed) {
                    return;
                }
                doSample();
            }
        }
    }
    class SimpleNodeSampler extends NodeSampler {
        @Override
        protected void doSample() {
            HashSet<DiscoveryNode> newNodes = new HashSet<>();
            HashSet<DiscoveryNode> newFilteredNodes = new HashSet<>();
            for (DiscoveryNode listedNode : listedNodes) {
                LivenessResponse livenessResponse = transportService.submitRequest(listedNode, TransportLivenessAction.NAME,
                        headers.applyTo(new LivenessRequest()),
                        TransportRequestOptions.options().withType(TransportRequestOptions.Type.STATE).withTimeout(pingTimeout),
                        new FutureTransportResponseHandler<LivenessResponse>() {
                            public LivenessResponse newInstance() {
                                return new LivenessResponse();
                            }
                        }).txGet();
                if (!ignoreClusterName && !clusterName.equals(livenessResponse.getClusterName())) {
                    newFilteredNodes.add(listedNode);
                } else if (livenessResponse.getDiscoveryNode() != null) {
                    DiscoveryNode nodeWithInfo = livenessResponse.getDiscoveryNode();
                    newNodes.add(new DiscoveryNode(nodeWithInfo.name(), nodeWithInfo.id(), nodeWithInfo.getHostName(), nodeWithInfo.getHostAddress(), listedNode.address(), nodeWithInfo.attributes(), nodeWithInfo.version()));
                } else {
                    newNodes.add(listedNode);
                }
            }
            nodes = validateNewNodes(newNodes);
            filteredNodes = ImmutableList.copyOf(newFilteredNodes);
        }
    }
    public <Response> void execute(NodeListenerCallback<Response> callback, ActionListener<Response> listener) {
        List<DiscoveryNode> nodes = this.nodes;
        ensureNodesAreAvailable(nodes);
        int index = getNodeNumber();
        RetryListener<Response> retryListener = new RetryListener<>(callback, listener, nodes, index);
        DiscoveryNode node = nodes.get((index) % nodes.size());
        try {
            callback.doWithNode(node, retryListener);
        } catch (Throwable t) {
            //this exception can't come from the TransportService as it doesn't throw exception at all
            listener.onFailure(t);
        }
    }

}
public class org.elasticsearch.transport.TransportService extends AbstractLifecycleComponent<TransportService> {
    public <T extends TransportResponse> TransportFuture<T> submitRequest(DiscoveryNode node, String action, TransportRequest request, TransportRequestOptions options, TransportResponseHandler<T> handler) throws TransportException {
        PlainTransportFuture<T> futureHandler = new PlainTransportFuture<>(handler);
        sendRequest(node, action, request, options, futureHandler);
        return futureHandler;
    }
    public <T extends TransportResponse> void sendRequest(final DiscoveryNode node, final String action, final TransportRequest request, final TransportRequestOptions options, TransportResponseHandler<T> handler) {
        final long requestId = newRequestId();
        final TimeoutHandler timeoutHandler;
        clientHandlers.put(requestId, new RequestHolder<>(handler, node, action, timeoutHandler));
        if (timeoutHandler != null) {
            assert options.timeout() != null;
            timeoutHandler.future = threadPool.schedule(options.timeout(), ThreadPool.Names.GENERIC, timeoutHandler);
        }
        if (node.equals(localNode)) {
            sendLocalRequest(requestId, action, request);
        } else {
            transport.sendRequest(node, requestId, action, request, options);
        }
    }
}
public class org.elasticsearch.transport.netty.NettyTransport extends AbstractLifecycleComponent<Transport> implements Transport {
    public void sendRequest(final DiscoveryNode node, final long requestId, final String action, final TransportRequest request, TransportRequestOptions options) throws IOException, TransportException {
        Channel targetChannel = nodeChannel(node, options);
        byte status = 0;// 这个很重要, server receive 通过这个确定是 sendRequest/sendResponse  
        status = TransportStatus.setRequest(status);
        ReleasableBytesStreamOutput bStream = new ReleasableBytesStreamOutput(bigArrays);
        boolean addedReleaseListener = false;
        try {
            bStream.skip(NettyHeader.HEADER_SIZE);
            StreamOutput stream = bStream;
            if (options.compress() && (!(request instanceof BytesTransportRequest))) {
                status = TransportStatus.setCompress(status);
                stream = CompressorFactory.defaultCompressor().streamOutput(stream);
            }
            Version version = Version.smallest(this.version, node.version());
            stream.setVersion(version);
            stream.writeString(action);
            ReleasablePagedBytesReference bytes;
            ChannelBuffer buffer;
            if (request instanceof BytesTransportRequest) {
                BytesTransportRequest bRequest = (BytesTransportRequest) request;
                assert node.version().equals(bRequest.version());
                bRequest.writeThin(stream);
                stream.close();
                bytes = bStream.bytes();
                ChannelBuffer headerBuffer = bytes.toChannelBuffer();
                ChannelBuffer contentBuffer = bRequest.bytes().toChannelBuffer();
                buffer = ChannelBuffers.wrappedBuffer(NettyUtils.DEFAULT_GATHERING, headerBuffer, contentBuffer);
            } else {
                request.writeTo(stream);
                stream.close();
                bytes = bStream.bytes();
                buffer = bytes.toChannelBuffer();
            }
            NettyHeader.writeHeader(buffer, requestId, status, version);
            ChannelFuture future = targetChannel.write(buffer);
            ReleaseChannelFutureListener listener = new ReleaseChannelFutureListener(bytes);
            future.addListener(listener);
            addedReleaseListener = true;
            transportServiceAdapter.onRequestSent(node, requestId, action, request, options);
        } finally {
            if (!addedReleaseListener) {
                Releasables.close(bStream.bytes());
            }
        }
    }
}

public abstract class org.elasticsearch.action.ActionRequestBuilder<Request extends ActionRequest, Response extends ActionResponse, RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>> {
    public ListenableActionFuture<Response> execute() {
        PlainListenableActionFuture<Response> future = new PlainListenableActionFuture<>(threadPool);
        execute(future);
        return future;
    }
    public void execute(ActionListener<Response> listener) {
        client.execute(action, beforeExecute(request), listener);
    }
}
public abstract class org.elasticsearch.client.support.AbstractClient extends AbstractComponent implements Client {
    public final <Request extends ActionRequest, Response extends ActionResponse, RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>> void execute(Action<Request, Response, RequestBuilder> action, Request request, ActionListener<Response> listener) {
        headers.applyTo(request);
        listener = threadedWrapper.wrap(listener);
        doExecute(action, request, listener);
    }
    static class IndicesAdmin implements IndicesAdminClient {
        public <Request extends ActionRequest, Response extends ActionResponse, RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>> void execute(Action<Request, Response, RequestBuilder> action, Request request, ActionListener<Response> listener) {
            client.execute(action, request, listener);
        }
    }
}


public class org.elasticsearch.client.transport.support.TransportProxyClient {
    public <Request extends ActionRequest, Response extends ActionResponse, RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>> void execute(final Action<Request, Response, RequestBuilder> action, final Request request, ActionListener<Response> listener) {
        final TransportActionNodeProxy<Request, Response> proxy = proxies.get(action);
        nodesService.execute(new TransportClientNodesService.NodeListenerCallback<Response>() {
            public void doWithNode(DiscoveryNode node, ActionListener<Response> listener) {
                proxy.execute(node, request, listener);
            }
        }, listener);
    }
}

public class TransportActionNodeProxy<Request extends ActionRequest, Response extends ActionResponse> extends AbstractComponent {
    public void execute(final DiscoveryNode node, final Request request, final ActionListener<Response> listener) {
        ActionRequestValidationException validationException = request.validate();
        if (validationException != null) {
            listener.onFailure(validationException);
            return;
        }
        transportService.sendRequest(node, action.name(), request, transportOptions, new ActionListenerResponseHandler<Response>(listener) {
            public Response newInstance() {
                return action.newResponse();
            }
        });
    }
}

public class org.elasticsearch.transport.netty.MessageChannelHandler extends SimpleChannelUpstreamHandler {
    public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception {
        Object m = e.getMessage();
        ChannelBuffer buffer = (ChannelBuffer) m;
        int size = buffer.getInt(buffer.readerIndex() - 4);
        StreamInput streamIn = ChannelBufferStreamInputFactory.create(buffer, size);
        boolean success = false;
        long requestId = streamIn.readLong();
        byte status = streamIn.readByte();
        streamIn.setVersion(version);
        if (TransportStatus.isRequest(status)) {
            String action = handleRequest(ctx.getChannel(), streamIn, requestId, version);
            final int nextByte = streamIn.read();
        } else {
            TransportResponseHandler<?> handler = transportServiceAdapter.onResponseReceived(requestId);
            if (handler != null) {
                handleResponse(ctx.getChannel(), streamIn, handler);
            }
        }
    }
}

public class org.elasticsearch.transport.netty.MessageChannelHandler extends SimpleChannelUpstreamHandler {
    protected String handleRequest(Channel channel, StreamInput buffer, long requestId, Version version) throws IOException {
        buffer = new NamedWriteableAwareStreamInput(buffer, transport.namedWriteableRegistry);
        final String action = buffer.readString();
        transportServiceAdapter.onRequestReceived(requestId, action);
        final NettyTransportChannel transportChannel = new NettyTransportChannel(transport, transportServiceAdapter, action, channel, requestId, version, profileName);
        final RequestHandlerRegistry reg = transportServiceAdapter.getRequestHandler(action);
        final TransportRequest request = reg.newRequest();
        request.remoteAddress(new InetSocketTransportAddress((InetSocketAddress) channel.getRemoteAddress()));
        request.readFrom(buffer);
        if (ThreadPool.Names.SAME.equals(reg.getExecutor())) {
            reg.getHandler().messageReceived(request, transportChannel);
        } else {
            threadPool.executor(reg.getExecutor()).execute(new RequestHandler(reg, request, transportChannel));
        }
        return action;
    }
}

public abstract class org.elasticsearch.action.support.replication.TransportReplicationAction<Request extends ReplicationRequest, ReplicaRequest extends ReplicationRequest, Response extends ActionWriteResponse> extends TransportAction<Request, Response> {
    class ReplicaOperationTransportHandler implements TransportRequestHandler<ReplicaRequest> {
        @Override
        public void messageReceived(final ReplicaRequest request, final TransportChannel channel) throws Exception {
            new AsyncReplicaAction(request, channel).run();
        }
    }
    private final class AsyncReplicaAction extends AbstractRunnable {
        private final ClusterStateObserver observer = new ClusterStateObserver(clusterService, null, logger);
        protected void doRun() throws Exception {
            shardOperationOnReplica(request.internalShardId, request);
            channel.sendResponse(TransportResponse.Empty.INSTANCE);
        }
    }
}

public class org.elasticsearch.action.index.TransportIndexAction extends TransportReplicationAction<IndexRequest, IndexRequest, IndexResponse> {
    protected void shardOperationOnReplica(ShardId shardId, IndexRequest request) {
        IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex());
        IndexShard indexShard = indexService.shardSafe(shardId.id());
        SourceToParse sourceToParse = SourceToParse.source(SourceToParse.Origin.REPLICA, request.source()).index(shardId.getIndex()).type(request.type()).id(request.id())
                .routing(request.routing()).parent(request.parent()).timestamp(request.timestamp()).ttl(request.ttl());
        final Engine.IndexingOperation operation;
        if (request.opType() == IndexRequest.OpType.INDEX) {
            operation = indexShard.prepareIndex(sourceToParse, request.version(), request.versionType(), Engine.Operation.Origin.REPLICA, request.canHaveDuplicates());
        } else {
            assert request.opType() == IndexRequest.OpType.CREATE : request.opType();
            operation = indexShard.prepareCreate(sourceToParse, request.version(), request.versionType(), Engine.Operation.Origin.REPLICA, request.canHaveDuplicates(), request.autoGeneratedId());
        }
        logger.info("===shardOperationOnReplica===189==="+operation.getClass().getName());
        Mapping update = operation.parsedDoc().dynamicMappingsUpdate();
        if (update != null) {
            throw new RetryOnReplicaException(shardId, "Mappings are not available on the replica yet, triggered update: " + update);
        }
        operation.execute(indexShard);
        processAfter(request, indexShard, operation.getTranslogLocation());
    }
    protected Tuple<IndexResponse, IndexRequest> shardOperationOnPrimary(ClusterState clusterState, PrimaryOperationRequest shardRequest) throws Throwable {
        final IndexRequest request = shardRequest.request;

        // validate, if routing is required, that we got routing
        IndexMetaData indexMetaData = clusterState.metaData().index(shardRequest.shardId.getIndex());
        MappingMetaData mappingMd = indexMetaData.mappingOrDefault(request.type());
        if (mappingMd != null && mappingMd.routing().required()) {
            if (request.routing() == null) {
                throw new RoutingMissingException(shardRequest.shardId.getIndex(), request.type(), request.id());
            }
        }

        IndexService indexService = indicesService.indexServiceSafe(shardRequest.shardId.getIndex());
        IndexShard indexShard = indexService.shardSafe(shardRequest.shardId.id());
        //loggerx.info("===shardOperationOnPrimary===169==="+shardRequest.shardId.id());
        final WriteResult<IndexResponse> result = executeIndexRequestOnPrimary(null, request, indexShard);
        final IndexResponse response = result.response;
        final Translog.Location location = result.location;
        processAfter(request, indexShard, location);
        return new Tuple<>(response, shardRequest.request);
    }

}
public abstract class org.elasticsearch.index.engine.Engine implements Closeable {

    public static final class Create extends IndexingOperation {
        private final boolean autoGeneratedId;

        public Create(Term uid, ParsedDocument doc, long version, VersionType versionType, Origin origin, long startTime, boolean canHaveDuplicates, boolean autoGeneratedId) {
            super(uid, doc, version, versionType, origin, startTime, canHaveDuplicates);
            this.autoGeneratedId = autoGeneratedId;
        }
        public boolean execute(IndexShard shard) {
            shard.create(this);
            return true;
        }
    }
}
public class org.elasticsearch.index.shard.IndexShard extends AbstractIndexShardComponent {
    public void create(Engine.Create create) {
        writeAllowed(create.origin());
        create = indexingService.preCreate(create);
        engine().create(create);
        indexingService.postCreate(create);
    }
}
public class org.elasticsearch.index.engine.InternalEngine extends Engine {
    public void create(Create create) throws EngineException {
        ensureOpen();
        innerCreate(create);
    }
    private void innerCreate(Create create) throws IOException {
        innerCreateNoLock(create, currentVersion, versionValue);
    }
    private void innerCreateNoLock(Create create, long currentVersion, VersionValue versionValue) throws IOException {
        indexWriter.addDocument(create.docs().get(0));//org.apache.lucene.index.IndexWriter
    }
}
public abstract class org.elasticsearch.action.support.replication.TransportReplicationAction<Request extends ReplicationRequest, ReplicaRequest extends ReplicationRequest, Response extends ActionWriteResponse> extends TransportAction<Request, Response> {
    protected void routeRequestOrPerformLocally(final ShardRouting primary, final ShardIterator shardsIt) {
        if (primary.currentNodeId().equals(observer.observedState().nodes().localNodeId())) {
            threadPool.executor(executor).execute(new AbstractRunnable() {
                protected void doRun() throws Exception {
                    performOnPrimary(primary, shardsIt);
                }
            });
        }
    }
    void performOnPrimary(final ShardRouting primary, final ShardIterator shardsIt) {
        indexShardReference = getIndexShardOperationsCounter(primary.shardId());
        PrimaryOperationRequest por = new PrimaryOperationRequest(primary.id(), internalRequest.concreteIndex(), internalRequest.request());
        Tuple<Response, ReplicaRequest> primaryResponse = shardOperationOnPrimary(observer.observedState(), por);
        replicationPhase = new ReplicationPhase(shardsIt, primaryResponse.v2(), primaryResponse.v1(), observer, primary, internalRequest, listener, indexShardReference);
        finishAndMoveToReplication(replicationPhase);
    }
    protected final WriteResult<IndexResponse> executeIndexRequestOnPrimary(BulkShardRequest shardRequest, IndexRequest request, IndexShard indexShard) throws Throwable {
        Engine.IndexingOperation operation = prepareIndexOperationOnPrimary(shardRequest, request, indexShard);
        final boolean created = operation.execute(indexShard);
        return new WriteResult(new IndexResponse(shardId.getIndex(), request.type(), request.id(), request.version(), created), operation.getTranslogLocation());
    }
}

===registerHandler===116===GET===/===org.elasticsearch.rest.action.main.RestMainAction
===registerHandler===116===GET===/_cat/allocation===org.elasticsearch.rest.action.cat.RestAllocationAction
===registerHandler===116===GET===/_cat/allocation/{nodes}===org.elasticsearch.rest.action.cat.RestAllocationAction
===registerHandler===116===GET===/_cat/shards===org.elasticsearch.rest.action.cat.RestShardsAction
===registerHandler===116===GET===/_cat/shards/{index}===org.elasticsearch.rest.action.cat.RestShardsAction
===registerHandler===116===GET===/_cat/master===org.elasticsearch.rest.action.cat.RestMasterAction
===registerHandler===116===GET===/_cat/nodes===org.elasticsearch.rest.action.cat.RestNodesAction
===registerHandler===116===GET===/_cat/indices===org.elasticsearch.rest.action.cat.RestIndicesAction
===registerHandler===116===GET===/_cat/indices/{index}===org.elasticsearch.rest.action.cat.RestIndicesAction
===registerHandler===116===GET===/_cat/segments===org.elasticsearch.rest.action.cat.RestSegmentsAction
===registerHandler===116===GET===/_cat/segments/{index}===org.elasticsearch.rest.action.cat.RestSegmentsAction
===registerHandler===116===GET===/_cat/count===org.elasticsearch.rest.action.cat.RestCountAction
===registerHandler===116===GET===/_cat/count/{index}===org.elasticsearch.rest.action.cat.RestCountAction
===registerHandler===116===GET===/_cat/recovery===org.elasticsearch.rest.action.cat.RestRecoveryAction
===registerHandler===116===GET===/_cat/recovery/{index}===org.elasticsearch.rest.action.cat.RestRecoveryAction
===registerHandler===116===GET===/_cat/health===org.elasticsearch.rest.action.cat.RestHealthAction
===registerHandler===116===GET===/_cat/pending_tasks===org.elasticsearch.rest.action.cat.RestPendingClusterTasksAction
===registerHandler===116===GET===/_cat/aliases===org.elasticsearch.rest.action.cat.RestAliasAction
===registerHandler===116===GET===/_cat/aliases/{alias}===org.elasticsearch.rest.action.cat.RestAliasAction
===registerHandler===116===GET===/_cat/thread_pool===org.elasticsearch.rest.action.cat.RestThreadPoolAction
===registerHandler===116===GET===/_cat/plugins===org.elasticsearch.rest.action.cat.RestPluginsAction
===registerHandler===116===GET===/_cat/fielddata===org.elasticsearch.rest.action.cat.RestFielddataAction
===registerHandler===116===GET===/_cat/fielddata/{fields}===org.elasticsearch.rest.action.cat.RestFielddataAction
===registerHandler===116===GET===/_cat/nodeattrs===org.elasticsearch.rest.action.cat.RestNodeAttrsAction
===registerHandler===116===GET===/_cat===org.elasticsearch.rest.action.cat.RestCatAction
===registerHandler===116===GET===/_cluster/stats===org.elasticsearch.rest.action.admin.cluster.stats.RestClusterStatsAction
===registerHandler===116===GET===/_cluster/stats/nodes/{nodeId}===org.elasticsearch.rest.action.admin.cluster.stats.RestClusterStatsAction
===registerHandler===116===GET===/_cluster/state===org.elasticsearch.rest.action.admin.cluster.state.RestClusterStateAction
===registerHandler===116===GET===/_cluster/state/{metric}===org.elasticsearch.rest.action.admin.cluster.state.RestClusterStateAction
===registerHandler===116===GET===/_cluster/state/{metric}/{indices}===org.elasticsearch.rest.action.admin.cluster.state.RestClusterStateAction
===registerHandler===116===GET===/_cluster/health===org.elasticsearch.rest.action.admin.cluster.health.RestClusterHealthAction
===registerHandler===116===GET===/_cluster/health/{index}===org.elasticsearch.rest.action.admin.cluster.health.RestClusterHealthAction
===registerHandler===116===GET===/_cluster/settings===org.elasticsearch.rest.action.admin.cluster.settings.RestClusterGetSettingsAction
===registerHandler===116===GET===/_cluster/pending_tasks===org.elasticsearch.rest.action.admin.cluster.tasks.RestPendingClusterTasksAction
===registerHandler===116===GET===/_cluster/nodes/hotthreads===org.elasticsearch.rest.action.admin.cluster.node.hotthreads.RestNodesHotThreadsAction
===registerHandler===116===GET===/_cluster/nodes/hot_threads===org.elasticsearch.rest.action.admin.cluster.node.hotthreads.RestNodesHotThreadsAction
===registerHandler===116===GET===/_cluster/nodes/{nodeId}/hotthreads===org.elasticsearch.rest.action.admin.cluster.node.hotthreads.RestNodesHotThreadsAction
===registerHandler===116===GET===/_cluster/nodes/{nodeId}/hot_threads===org.elasticsearch.rest.action.admin.cluster.node.hotthreads.RestNodesHotThreadsAction
===registerHandler===116===GET===/_search===org.elasticsearch.rest.action.search.RestSearchAction
===registerHandler===116===GET===/_search/template===org.elasticsearch.rest.action.search.RestSearchAction
===registerHandler===116===GET===/_search/exists===org.elasticsearch.rest.action.exists.RestExistsAction
===registerHandler===116===GET===/_search/scroll===org.elasticsearch.rest.action.search.RestSearchScrollAction
===registerHandler===116===GET===/_search/scroll/{scroll_id}===org.elasticsearch.rest.action.search.RestSearchScrollAction
===registerHandler===116===GET===/_search/template/{id}===org.elasticsearch.rest.action.template.RestGetSearchTemplateAction
===registerHandler===116===GET===/_nodes===org.elasticsearch.rest.action.admin.cluster.node.info.RestNodesInfoAction
===registerHandler===116===GET===/_nodes/{nodeId}===org.elasticsearch.rest.action.admin.cluster.node.info.RestNodesInfoAction
===registerHandler===116===GET===/_nodes/{nodeId}/{metrics}===org.elasticsearch.rest.action.admin.cluster.node.info.RestNodesInfoAction
===registerHandler===116===GET===/_nodes/{nodeId}/info/{metrics}===org.elasticsearch.rest.action.admin.cluster.node.info.RestNodesInfoAction
===registerHandler===116===GET===/_nodes/stats===org.elasticsearch.rest.action.admin.cluster.node.stats.RestNodesStatsAction
===registerHandler===116===GET===/_nodes/{nodeId}/stats===org.elasticsearch.rest.action.admin.cluster.node.stats.RestNodesStatsAction
===registerHandler===116===GET===/_nodes/stats/{metric}===org.elasticsearch.rest.action.admin.cluster.node.stats.RestNodesStatsAction
===registerHandler===116===GET===/_nodes/{nodeId}/stats/{metric}===org.elasticsearch.rest.action.admin.cluster.node.stats.RestNodesStatsAction
===registerHandler===116===GET===/_nodes/stats/{metric}/{indexMetric}===org.elasticsearch.rest.action.admin.cluster.node.stats.RestNodesStatsAction
===registerHandler===116===GET===/_nodes/{nodeId}/stats/{metric}/{indexMetric}===org.elasticsearch.rest.action.admin.cluster.node.stats.RestNodesStatsAction
===registerHandler===116===GET===/_nodes/hotthreads===org.elasticsearch.rest.action.admin.cluster.node.hotthreads.RestNodesHotThreadsAction
===registerHandler===116===GET===/_nodes/hot_threads===org.elasticsearch.rest.action.admin.cluster.node.hotthreads.RestNodesHotThreadsAction
===registerHandler===116===GET===/_nodes/{nodeId}/hotthreads===org.elasticsearch.rest.action.admin.cluster.node.hotthreads.RestNodesHotThreadsAction
===registerHandler===116===GET===/_nodes/{nodeId}/hot_threads===org.elasticsearch.rest.action.admin.cluster.node.hotthreads.RestNodesHotThreadsAction
===registerHandler===116===GET===/_search_shards===org.elasticsearch.rest.action.admin.cluster.shards.RestClusterSearchShardsAction
===registerHandler===116===GET===/{index}/_search_shards===org.elasticsearch.rest.action.admin.cluster.shards.RestClusterSearchShardsAction
===registerHandler===116===GET===/{index}/{type}/_search_shards===org.elasticsearch.rest.action.admin.cluster.shards.RestClusterSearchShardsAction
===registerHandler===116===GET===/{index}===org.elasticsearch.rest.action.admin.indices.get.RestGetIndicesAction
===registerHandler===116===GET===/{index}/{type}===org.elasticsearch.rest.action.admin.indices.get.RestGetIndicesAction
===registerHandler===116===GET===/{index}/_stats===org.elasticsearch.rest.action.admin.indices.stats.RestIndicesStatsAction
===registerHandler===116===GET===/{index}/_stats/{metric}===org.elasticsearch.rest.action.admin.indices.stats.RestIndicesStatsAction
===registerHandler===116===GET===/{index}/_segments===org.elasticsearch.rest.action.admin.indices.segments.RestIndicesSegmentsAction
===registerHandler===116===GET===/{index}/_shard_stores===org.elasticsearch.rest.action.admin.indices.shards.RestIndicesShardStoresAction
===registerHandler===116===GET===/{index}/_alias/{name}===org.elasticsearch.rest.action.admin.indices.alias.get.RestGetAliasesAction
===registerHandler===116===GET===/{index}/_aliases/{name}===org.elasticsearch.rest.action.admin.indices.alias.get.RestGetIndicesAliasesAction
===registerHandler===116===GET===/{index}/_settings/{name}===org.elasticsearch.rest.action.admin.indices.settings.RestGetSettingsAction
===registerHandler===116===GET===/{index}/_setting/{name}===org.elasticsearch.rest.action.admin.indices.settings.RestGetSettingsAction
===registerHandler===116===GET===/{index}/_analyze===org.elasticsearch.rest.action.admin.indices.analyze.RestAnalyzeAction
===registerHandler===116===GET===/{index}/_warmer/{name}===org.elasticsearch.rest.action.admin.indices.warmer.get.RestGetWarmerAction
===registerHandler===116===GET===/{index}/_warmers/{name}===org.elasticsearch.rest.action.admin.indices.warmer.get.RestGetWarmerAction
===registerHandler===116===GET===/{index}/{type}/_warmer/{name}===org.elasticsearch.rest.action.admin.indices.warmer.get.RestGetWarmerAction
===registerHandler===116===GET===/{index}/{type}/_mapping===org.elasticsearch.rest.action.admin.indices.mapping.get.RestGetMappingAction
===registerHandler===116===GET===/{index}/_mappings/{type}===org.elasticsearch.rest.action.admin.indices.mapping.get.RestGetMappingAction
===registerHandler===116===GET===/{index}/_mapping/{type}===org.elasticsearch.rest.action.admin.indices.mapping.get.RestGetMappingAction
===registerHandler===116===GET===/{index}/_mapping/field/{fields}===org.elasticsearch.rest.action.admin.indices.mapping.get.RestGetFieldMappingAction
===registerHandler===116===GET===/{index}/{type}/_mapping/field/{fields}===org.elasticsearch.rest.action.admin.indices.mapping.get.RestGetFieldMappingAction
===registerHandler===116===GET===/{index}/_mapping/{type}/field/{fields}===org.elasticsearch.rest.action.admin.indices.mapping.get.RestGetFieldMappingAction
===registerHandler===116===GET===/{index}/_refresh===org.elasticsearch.rest.action.admin.indices.refresh.RestRefreshAction
===registerHandler===116===GET===/{index}/_flush===org.elasticsearch.rest.action.admin.indices.flush.RestFlushAction
===registerHandler===116===GET===/{index}/_flush/synced===org.elasticsearch.rest.action.admin.indices.flush.RestSyncedFlushAction
===registerHandler===116===GET===/{index}/_optimize===org.elasticsearch.rest.action.admin.indices.optimize.RestOptimizeAction
===registerHandler===116===GET===/{index}/_upgrade===org.elasticsearch.rest.action.admin.indices.upgrade.RestUpgradeAction
===registerHandler===116===GET===/{index}/_cache/clear===org.elasticsearch.rest.action.admin.indices.cache.clear.RestClearIndicesCacheAction
===registerHandler===116===GET===/{index}/{type}/{id}===org.elasticsearch.rest.action.get.RestGetAction
===registerHandler===116===GET===/{index}/{type}/{id}/_source===org.elasticsearch.rest.action.get.RestGetSourceAction
===registerHandler===116===GET===/{index}/_mget===org.elasticsearch.rest.action.get.RestMultiGetAction
===registerHandler===116===GET===/{index}/{type}/_mget===org.elasticsearch.rest.action.get.RestMultiGetAction
===registerHandler===116===GET===/{index}/_count===org.elasticsearch.rest.action.count.RestCountAction
===registerHandler===116===GET===/{index}/{type}/_count===org.elasticsearch.rest.action.count.RestCountAction
===registerHandler===116===GET===/{index}/_suggest===org.elasticsearch.rest.action.suggest.RestSuggestAction
===registerHandler===116===GET===/{index}/{type}/_termvectors===org.elasticsearch.rest.action.termvectors.RestTermVectorsAction
===registerHandler===116===GET===/{index}/{type}/{id}/_termvectors===org.elasticsearch.rest.action.termvectors.RestTermVectorsAction
===registerHandler===116===GET===/{index}/{type}/_termvector===org.elasticsearch.rest.action.termvectors.RestTermVectorsAction
===registerHandler===116===GET===/{index}/{type}/{id}/_termvector===org.elasticsearch.rest.action.termvectors.RestTermVectorsAction
===registerHandler===116===GET===/{index}/_mtermvectors===org.elasticsearch.rest.action.termvectors.RestMultiTermVectorsAction
===registerHandler===116===GET===/{index}/{type}/_mtermvectors===org.elasticsearch.rest.action.termvectors.RestMultiTermVectorsAction
===registerHandler===116===GET===/{index}/{type}/_percolate===org.elasticsearch.rest.action.percolate.RestPercolateAction
===registerHandler===116===GET===/{index}/{type}/{id}/_percolate===org.elasticsearch.rest.action.percolate.RestPercolateAction$RestPercolateExistingDocHandler
===registerHandler===116===GET===/{index}/{type}/_percolate/count===org.elasticsearch.rest.action.percolate.RestPercolateAction$RestCountPercolateDocHandler
===registerHandler===116===GET===/{index}/{type}/{id}/_percolate/count===org.elasticsearch.rest.action.percolate.RestPercolateAction$RestCountPercolateExistingDocHandler
===registerHandler===116===GET===/{index}/_mpercolate===org.elasticsearch.rest.action.percolate.RestMultiPercolateAction
===registerHandler===116===GET===/{index}/{type}/_mpercolate===org.elasticsearch.rest.action.percolate.RestMultiPercolateAction
===registerHandler===116===GET===/{index}/_search===org.elasticsearch.rest.action.search.RestSearchAction
===registerHandler===116===GET===/{index}/{type}/_search===org.elasticsearch.rest.action.search.RestSearchAction
===registerHandler===116===GET===/{index}/_search/template===org.elasticsearch.rest.action.search.RestSearchAction
===registerHandler===116===GET===/{index}/{type}/_search/template===org.elasticsearch.rest.action.search.RestSearchAction
===registerHandler===116===GET===/{index}/_search/exists===org.elasticsearch.rest.action.exists.RestExistsAction
===registerHandler===116===GET===/{index}/{type}/_search/exists===org.elasticsearch.rest.action.exists.RestExistsAction
===registerHandler===116===GET===/{index}/_msearch===org.elasticsearch.rest.action.search.RestMultiSearchAction
===registerHandler===116===GET===/{index}/{type}/_msearch===org.elasticsearch.rest.action.search.RestMultiSearchAction
===registerHandler===116===GET===/{index}/_validate/query===org.elasticsearch.rest.action.admin.indices.validate.query.RestValidateQueryAction
===registerHandler===116===GET===/{index}/{type}/_validate/query===org.elasticsearch.rest.action.admin.indices.validate.query.RestValidateQueryAction
===registerHandler===116===GET===/{index}/{type}/{id}/_explain===org.elasticsearch.rest.action.explain.RestExplainAction
===registerHandler===116===GET===/{index}/_recovery===org.elasticsearch.rest.action.admin.indices.recovery.RestRecoveryAction
===registerHandler===116===GET===/{index}/_field_stats===org.elasticsearch.rest.action.fieldstats.RestFieldStatsAction
===registerHandler===116===GET===/_snapshot===org.elasticsearch.rest.action.admin.cluster.repositories.get.RestGetRepositoriesAction
===registerHandler===116===GET===/_snapshot/{repository}===org.elasticsearch.rest.action.admin.cluster.repositories.get.RestGetRepositoriesAction
===registerHandler===116===GET===/_snapshot/{repository}/{snapshot}===org.elasticsearch.rest.action.admin.cluster.snapshots.get.RestGetSnapshotsAction
===registerHandler===116===GET===/_snapshot/{repository}/{snapshot}/_status===org.elasticsearch.rest.action.admin.cluster.snapshots.status.RestSnapshotsStatusAction
===registerHandler===116===GET===/_snapshot/{repository}/_status===org.elasticsearch.rest.action.admin.cluster.snapshots.status.RestSnapshotsStatusAction
===registerHandler===116===GET===/_snapshot/_status===org.elasticsearch.rest.action.admin.cluster.snapshots.status.RestSnapshotsStatusAction
===registerHandler===116===GET===/_stats===org.elasticsearch.rest.action.admin.indices.stats.RestIndicesStatsAction
===registerHandler===116===GET===/_stats/{metric}===org.elasticsearch.rest.action.admin.indices.stats.RestIndicesStatsAction
===registerHandler===116===GET===/_stats/{metric}/{indexMetric}===org.elasticsearch.rest.action.admin.indices.stats.RestIndicesStatsAction
===registerHandler===116===GET===/_segments===org.elasticsearch.rest.action.admin.indices.segments.RestIndicesSegmentsAction
===registerHandler===116===GET===/_shard_stores===org.elasticsearch.rest.action.admin.indices.shards.RestIndicesShardStoresAction
===registerHandler===116===GET===/_alias/{name}===org.elasticsearch.rest.action.admin.indices.alias.get.RestGetAliasesAction
===registerHandler===116===GET===/_aliases/{name}===org.elasticsearch.rest.action.admin.indices.alias.get.RestGetIndicesAliasesAction
===registerHandler===116===GET===/_settings/{name}===org.elasticsearch.rest.action.admin.indices.settings.RestGetSettingsAction
===registerHandler===116===GET===/_analyze===org.elasticsearch.rest.action.admin.indices.analyze.RestAnalyzeAction
===registerHandler===116===GET===/_template===org.elasticsearch.rest.action.admin.indices.template.get.RestGetIndexTemplateAction
===registerHandler===116===GET===/_template/{name}===org.elasticsearch.rest.action.admin.indices.template.get.RestGetIndexTemplateAction
===registerHandler===116===GET===/_warmer/{name}===org.elasticsearch.rest.action.admin.indices.warmer.get.RestGetWarmerAction
===registerHandler===116===GET===/_mapping/{type}===org.elasticsearch.rest.action.admin.indices.mapping.get.RestGetMappingAction
===registerHandler===116===GET===/_mapping/field/{fields}===org.elasticsearch.rest.action.admin.indices.mapping.get.RestGetFieldMappingAction
===registerHandler===116===GET===/_mapping/{type}/field/{fields}===org.elasticsearch.rest.action.admin.indices.mapping.get.RestGetFieldMappingAction
===registerHandler===116===GET===/_refresh===org.elasticsearch.rest.action.admin.indices.refresh.RestRefreshAction
===registerHandler===116===GET===/_flush===org.elasticsearch.rest.action.admin.indices.flush.RestFlushAction
===registerHandler===116===GET===/_flush/synced===org.elasticsearch.rest.action.admin.indices.flush.RestSyncedFlushAction
===registerHandler===116===GET===/_optimize===org.elasticsearch.rest.action.admin.indices.optimize.RestOptimizeAction
===registerHandler===116===GET===/_upgrade===org.elasticsearch.rest.action.admin.indices.upgrade.RestUpgradeAction
===registerHandler===116===GET===/_cache/clear===org.elasticsearch.rest.action.admin.indices.cache.clear.RestClearIndicesCacheAction
===registerHandler===116===GET===/_mget===org.elasticsearch.rest.action.get.RestMultiGetAction
===registerHandler===116===GET===/_count===org.elasticsearch.rest.action.count.RestCountAction
===registerHandler===116===GET===/_suggest===org.elasticsearch.rest.action.suggest.RestSuggestAction
===registerHandler===116===GET===/_mtermvectors===org.elasticsearch.rest.action.termvectors.RestMultiTermVectorsAction
===registerHandler===116===GET===/_mpercolate===org.elasticsearch.rest.action.percolate.RestMultiPercolateAction
===registerHandler===116===GET===/_msearch===org.elasticsearch.rest.action.search.RestMultiSearchAction
===registerHandler===116===GET===/_render/template===org.elasticsearch.rest.action.admin.indices.validate.template.RestRenderSearchTemplateAction
===registerHandler===116===GET===/_render/template/{id}===org.elasticsearch.rest.action.admin.indices.validate.template.RestRenderSearchTemplateAction
===registerHandler===116===GET===/_validate/query===org.elasticsearch.rest.action.admin.indices.validate.query.RestValidateQueryAction
===registerHandler===116===GET===/_recovery===org.elasticsearch.rest.action.admin.indices.recovery.RestRecoveryAction
===registerHandler===116===GET===/_scripts/{lang}/{id}===org.elasticsearch.rest.action.script.RestGetIndexedScriptAction
===registerHandler===116===GET===/_field_stats===org.elasticsearch.rest.action.fieldstats.RestFieldStatsAction


===registerHandler===116===HEAD===/{index}===org.elasticsearch.rest.action.admin.indices.exists.indices.RestIndicesExistsAction
===registerHandler===116===HEAD===/{index}/{type}===org.elasticsearch.rest.action.admin.indices.exists.types.RestTypesExistsAction
===registerHandler===116===HEAD===/_alias/{name}===org.elasticsearch.rest.action.admin.indices.alias.head.RestAliasesExistAction
===registerHandler===116===HEAD===/{index}/_alias/{name}===org.elasticsearch.rest.action.admin.indices.alias.head.RestAliasesExistAction
===registerHandler===116===HEAD===/{index}/_alias===org.elasticsearch.rest.action.admin.indices.alias.head.RestAliasesExistAction
===registerHandler===116===HEAD===/===org.elasticsearch.rest.action.main.RestMainAction
===registerHandler===116===HEAD===/{index}/{type}/{id}===org.elasticsearch.rest.action.get.RestHeadAction
===registerHandler===116===HEAD===/{index}/{type}/{id}/_source===org.elasticsearch.rest.action.get.RestHeadAction
===registerHandler===116===HEAD===/_template/{name}===org.elasticsearch.rest.action.admin.indices.template.head.RestHeadIndexTemplateAction



===registerHandler===116===DELETE===/_search/template/{id}===org.elasticsearch.rest.action.template.RestDeleteSearchTemplateAction
===registerHandler===116===DELETE===/_scripts/{lang}/{id}===org.elasticsearch.rest.action.script.RestDeleteIndexedScriptAction
===registerHandler===116===DELETE===/_snapshot/{repository}===org.elasticsearch.rest.action.admin.cluster.repositories.delete.RestDeleteRepositoryAction
===registerHandler===116===DELETE===/_snapshot/{repository}/{snapshot}===org.elasticsearch.rest.action.admin.cluster.snapshots.delete.RestDeleteSnapshotAction
===registerHandler===116===DELETE===/{index}/_alias/{name}===org.elasticsearch.rest.action.admin.indices.alias.delete.RestIndexDeleteAliasesAction
===registerHandler===116===DELETE===/{index}/_aliases/{name}===org.elasticsearch.rest.action.admin.indices.alias.delete.RestIndexDeleteAliasesAction
===registerHandler===116===DELETE===/===org.elasticsearch.rest.action.admin.indices.delete.RestDeleteIndexAction
===registerHandler===116===DELETE===/{index}===org.elasticsearch.rest.action.admin.indices.delete.RestDeleteIndexAction
===registerHandler===116===DELETE===/_template/{name}===org.elasticsearch.rest.action.admin.indices.template.delete.RestDeleteIndexTemplateAction
===registerHandler===116===DELETE===/{index}/_warmer===org.elasticsearch.rest.action.admin.indices.warmer.delete.RestDeleteWarmerAction
===registerHandler===116===DELETE===/{index}/_warmer/{name}===org.elasticsearch.rest.action.admin.indices.warmer.delete.RestDeleteWarmerAction
===registerHandler===116===DELETE===/{index}/_warmers===org.elasticsearch.rest.action.admin.indices.warmer.delete.RestDeleteWarmerAction
===registerHandler===116===DELETE===/{index}/_warmers/{name}===org.elasticsearch.rest.action.admin.indices.warmer.delete.RestDeleteWarmerAction
===registerHandler===116===DELETE===/{index}/{type}/{id}===org.elasticsearch.rest.action.delete.RestDeleteAction
===registerHandler===116===DELETE===/_search/scroll===org.elasticsearch.rest.action.search.RestClearScrollAction
===registerHandler===116===DELETE===/_search/scroll/{scroll_id}===org.elasticsearch.rest.action.search.RestClearScrollAction

===registerHandler===116===PUT===/_snapshot/{repository}/{snapshot}===org.elasticsearch.rest.action.admin.cluster.snapshots.create.RestCreateSnapshotAction
===registerHandler===116===PUT===/{index}/_alias/{name}===org.elasticsearch.rest.action.admin.indices.alias.put.RestIndexPutAliasAction
===registerHandler===116===PUT===/_alias/{name}===org.elasticsearch.rest.action.admin.indices.alias.put.RestIndexPutAliasAction
===registerHandler===116===PUT===/{index}/_aliases/{name}===org.elasticsearch.rest.action.admin.indices.alias.put.RestIndexPutAliasAction
===registerHandler===116===PUT===/_aliases/{name}===org.elasticsearch.rest.action.admin.indices.alias.put.RestIndexPutAliasAction
===registerHandler===116===PUT===/{index}/_alias===org.elasticsearch.rest.action.admin.indices.alias.put.RestIndexPutAliasAction
===registerHandler===116===PUT===/_alias===org.elasticsearch.rest.action.admin.indices.alias.put.RestIndexPutAliasAction
===registerHandler===116===PUT===/{index}/_aliases===org.elasticsearch.rest.action.admin.indices.alias.put.RestIndexPutAliasAction
===registerHandler===116===PUT===/{index}===org.elasticsearch.rest.action.admin.indices.create.RestCreateIndexAction
===registerHandler===116===PUT===/{index}/_settings===org.elasticsearch.rest.action.admin.indices.settings.RestUpdateSettingsAction
===registerHandler===116===PUT===/_settings===org.elasticsearch.rest.action.admin.indices.settings.RestUpdateSettingsAction
===registerHandler===116===PUT===/_template/{name}===org.elasticsearch.rest.action.admin.indices.template.put.RestPutIndexTemplateAction
===registerHandler===116===PUT===/_warmer/{name}===org.elasticsearch.rest.action.admin.indices.warmer.put.RestPutWarmerAction
===registerHandler===116===PUT===/{index}/_warmer/{name}===org.elasticsearch.rest.action.admin.indices.warmer.put.RestPutWarmerAction
===registerHandler===116===PUT===/{index}/{type}/_warmer/{name}===org.elasticsearch.rest.action.admin.indices.warmer.put.RestPutWarmerAction
===registerHandler===116===PUT===/_warmers/{name}===org.elasticsearch.rest.action.admin.indices.warmer.put.RestPutWarmerAction
===registerHandler===116===PUT===/{index}/_warmers/{name}===org.elasticsearch.rest.action.admin.indices.warmer.put.RestPutWarmerAction
===registerHandler===116===PUT===/{index}/{type}/_warmers/{name}===org.elasticsearch.rest.action.admin.indices.warmer.put.RestPutWarmerAction
===registerHandler===116===PUT===/{index}/_mapping/===org.elasticsearch.rest.action.admin.indices.mapping.put.RestPutMappingAction
===registerHandler===116===PUT===/{index}/{type}/_mapping===org.elasticsearch.rest.action.admin.indices.mapping.put.RestPutMappingAction
===registerHandler===116===PUT===/{index}/_mapping/{type}===org.elasticsearch.rest.action.admin.indices.mapping.put.RestPutMappingAction
===registerHandler===116===PUT===/_mapping/{type}===org.elasticsearch.rest.action.admin.indices.mapping.put.RestPutMappingAction
===registerHandler===116===PUT===/{index}/_mappings/===org.elasticsearch.rest.action.admin.indices.mapping.put.RestPutMappingAction
===registerHandler===116===PUT===/{index}/{type}/_mappings===org.elasticsearch.rest.action.admin.indices.mapping.put.RestPutMappingAction
===registerHandler===116===PUT===/{index}/_mappings/{type}===org.elasticsearch.rest.action.admin.indices.mapping.put.RestPutMappingAction
===registerHandler===116===PUT===/_mappings/{type}===org.elasticsearch.rest.action.admin.indices.mapping.put.RestPutMappingAction
===registerHandler===116===PUT===/{index}/{type}/{id}===org.elasticsearch.rest.action.index.RestIndexAction
===registerHandler===116===PUT===/{index}/{type}/_bulk===org.elasticsearch.rest.action.bulk.RestBulkAction
===registerHandler===116===PUT===/_search/template/{id}===org.elasticsearch.rest.action.template.RestPutSearchTemplateAction
===registerHandler===116===PUT===/_search/template/{id}/_create===org.elasticsearch.rest.action.template.RestPutSearchTemplateAction$CreateHandler
===registerHandler===116===PUT===/_scripts/{lang}/{id}===org.elasticsearch.rest.action.script.RestPutIndexedScriptAction
===registerHandler===116===PUT===/_scripts/{lang}/{id}/_create===org.elasticsearch.rest.action.script.RestPutIndexedScriptAction$CreateHandler
===registerHandler===116===PUT===/_bulk===org.elasticsearch.rest.action.bulk.RestBulkAction
===registerHandler===116===PUT===/{index}/{type}/{id}/_create===org.elasticsearch.rest.action.index.RestIndexAction$CreateHandler
===registerHandler===116===PUT===/{index}/_bulk===org.elasticsearch.rest.action.bulk.RestBulkAction
===registerHandler===116===PUT===/_snapshot/{repository}===org.elasticsearch.rest.action.admin.cluster.repositories.put.RestPutRepositoryAction
===registerHandler===116===PUT===/_cluster/settings===org.elasticsearch.rest.action.admin.cluster.settings.RestClusterUpdateSettingsAction

===registerHandler===116===POST===/{index}/_alias/{name}===org.elasticsearch.rest.action.admin.indices.alias.put.RestIndexPutAliasAction
===registerHandler===116===POST===/_alias/{name}===org.elasticsearch.rest.action.admin.indices.alias.put.RestIndexPutAliasAction
===registerHandler===116===POST===/{index}/_aliases/{name}===org.elasticsearch.rest.action.admin.indices.alias.put.RestIndexPutAliasAction
===registerHandler===116===POST===/_aliases/{name}===org.elasticsearch.rest.action.admin.indices.alias.put.RestIndexPutAliasAction
===registerHandler===116===POST===/_aliases===org.elasticsearch.rest.action.admin.indices.alias.RestIndicesAliasesAction
===registerHandler===116===POST===/_analyze===org.elasticsearch.rest.action.admin.indices.analyze.RestAnalyzeAction
===registerHandler===116===POST===/{index}/_msearch===org.elasticsearch.rest.action.search.RestMultiSearchAction
===registerHandler===116===POST===/{index}/{type}/_msearch===org.elasticsearch.rest.action.search.RestMultiSearchAction
===registerHandler===116===POST===/_render/template===org.elasticsearch.rest.action.admin.indices.validate.template.RestRenderSearchTemplateAction
===registerHandler===116===POST===/_render/template/{id}===org.elasticsearch.rest.action.admin.indices.validate.template.RestRenderSearchTemplateAction
===registerHandler===116===POST===/_validate/query===org.elasticsearch.rest.action.admin.indices.validate.query.RestValidateQueryAction
===registerHandler===116===POST===/{index}/_validate/query===org.elasticsearch.rest.action.admin.indices.validate.query.RestValidateQueryAction
===registerHandler===116===POST===/{index}/{type}/_validate/query===org.elasticsearch.rest.action.admin.indices.validate.query.RestValidateQueryAction
===registerHandler===116===POST===/{index}/{type}/{id}/_explain===org.elasticsearch.rest.action.explain.RestExplainAction
===registerHandler===116===POST===/_search/template/{id}===org.elasticsearch.rest.action.template.RestPutSearchTemplateAction
===registerHandler===116===POST===/_search/template/{id}/_create===org.elasticsearch.rest.action.template.RestPutSearchTemplateAction$CreateHandler
===registerHandler===116===POST===/_scripts/{lang}/{id}/_create===org.elasticsearch.rest.action.script.RestPutIndexedScriptAction$CreateHandler
===registerHandler===116===POST===/{index}/_analyze===org.elasticsearch.rest.action.admin.indices.analyze.RestAnalyzeAction
===registerHandler===116===POST===/_template/{name}===org.elasticsearch.rest.action.admin.indices.template.put.RestPutIndexTemplateAction
===registerHandler===116===POST===/_warmer/{name}===org.elasticsearch.rest.action.admin.indices.warmer.put.RestPutWarmerAction
===registerHandler===116===POST===/{index}/_warmer/{name}===org.elasticsearch.rest.action.admin.indices.warmer.put.RestPutWarmerAction
===registerHandler===116===POST===/{index}/{type}/_warmer/{name}===org.elasticsearch.rest.action.admin.indices.warmer.put.RestPutWarmerAction
===registerHandler===116===POST===/_warmers/{name}===org.elasticsearch.rest.action.admin.indices.warmer.put.RestPutWarmerAction
===registerHandler===116===POST===/{index}/_warmers/{name}===org.elasticsearch.rest.action.admin.indices.warmer.put.RestPutWarmerAction
===registerHandler===116===POST===/{index}/{type}/_warmers/{name}===org.elasticsearch.rest.action.admin.indices.warmer.put.RestPutWarmerAction
===registerHandler===116===POST===/{index}/_mapping/===org.elasticsearch.rest.action.admin.indices.mapping.put.RestPutMappingAction
===registerHandler===116===POST===/{index}/{type}/_mapping===org.elasticsearch.rest.action.admin.indices.mapping.put.RestPutMappingAction
===registerHandler===116===POST===/{index}/_mapping/{type}===org.elasticsearch.rest.action.admin.indices.mapping.put.RestPutMappingAction
===registerHandler===116===POST===/_mapping/{type}===org.elasticsearch.rest.action.admin.indices.mapping.put.RestPutMappingAction
===registerHandler===116===POST===/{index}/_mappings/===org.elasticsearch.rest.action.admin.indices.mapping.put.RestPutMappingAction
===registerHandler===116===POST===/{index}/{type}/_mappings===org.elasticsearch.rest.action.admin.indices.mapping.put.RestPutMappingAction
===registerHandler===116===POST===/{index}/_mappings/{type}===org.elasticsearch.rest.action.admin.indices.mapping.put.RestPutMappingAction
===registerHandler===116===POST===/_mappings/{type}===org.elasticsearch.rest.action.admin.indices.mapping.put.RestPutMappingAction
===registerHandler===116===POST===/_refresh===org.elasticsearch.rest.action.admin.indices.refresh.RestRefreshAction
===registerHandler===116===POST===/{index}/_refresh===org.elasticsearch.rest.action.admin.indices.refresh.RestRefreshAction
===registerHandler===116===POST===/_flush===org.elasticsearch.rest.action.admin.indices.flush.RestFlushAction
===registerHandler===116===POST===/{index}/_flush===org.elasticsearch.rest.action.admin.indices.flush.RestFlushAction
===registerHandler===116===POST===/_flush/synced===org.elasticsearch.rest.action.admin.indices.flush.RestSyncedFlushAction
===registerHandler===116===POST===/{index}/_flush/synced===org.elasticsearch.rest.action.admin.indices.flush.RestSyncedFlushAction
===registerHandler===116===POST===/_optimize===org.elasticsearch.rest.action.admin.indices.optimize.RestOptimizeAction
===registerHandler===116===POST===/{index}/_optimize===org.elasticsearch.rest.action.admin.indices.optimize.RestOptimizeAction
===registerHandler===116===POST===/_upgrade===org.elasticsearch.rest.action.admin.indices.upgrade.RestUpgradeAction
===registerHandler===116===POST===/{index}/_upgrade===org.elasticsearch.rest.action.admin.indices.upgrade.RestUpgradeAction
===registerHandler===116===POST===/_cache/clear===org.elasticsearch.rest.action.admin.indices.cache.clear.RestClearIndicesCacheAction
===registerHandler===116===POST===/{index}/_cache/clear===org.elasticsearch.rest.action.admin.indices.cache.clear.RestClearIndicesCacheAction
===registerHandler===116===POST===/{index}/{type}===org.elasticsearch.rest.action.index.RestIndexAction
===registerHandler===116===POST===/{index}/{type}/{id}===org.elasticsearch.rest.action.index.RestIndexAction
===registerHandler===116===POST===/{index}/{type}/{id}/_create===org.elasticsearch.rest.action.index.RestIndexAction$CreateHandler
===registerHandler===116===POST===/_mget===org.elasticsearch.rest.action.get.RestMultiGetAction
===registerHandler===116===POST===/{index}/_mget===org.elasticsearch.rest.action.get.RestMultiGetAction
===registerHandler===116===POST===/{index}/{type}/_mget===org.elasticsearch.rest.action.get.RestMultiGetAction
===registerHandler===116===POST===/_count===org.elasticsearch.rest.action.count.RestCountAction
===registerHandler===116===POST===/{index}/_count===org.elasticsearch.rest.action.count.RestCountAction
===registerHandler===116===POST===/{index}/{type}/_count===org.elasticsearch.rest.action.count.RestCountAction
===registerHandler===116===POST===/_suggest===org.elasticsearch.rest.action.suggest.RestSuggestAction
===registerHandler===116===POST===/{index}/_suggest===org.elasticsearch.rest.action.suggest.RestSuggestAction
===registerHandler===116===POST===/{index}/{type}/_termvectors===org.elasticsearch.rest.action.termvectors.RestTermVectorsAction
===registerHandler===116===POST===/{index}/{type}/{id}/_termvectors===org.elasticsearch.rest.action.termvectors.RestTermVectorsAction
===registerHandler===116===POST===/{index}/{type}/_termvector===org.elasticsearch.rest.action.termvectors.RestTermVectorsAction
===registerHandler===116===POST===/{index}/{type}/{id}/_termvector===org.elasticsearch.rest.action.termvectors.RestTermVectorsAction
===registerHandler===116===POST===/_mtermvectors===org.elasticsearch.rest.action.termvectors.RestMultiTermVectorsAction
===registerHandler===116===POST===/_scripts/{lang}/{id}===org.elasticsearch.rest.action.script.RestPutIndexedScriptAction
===registerHandler===116===POST===/_field_stats===org.elasticsearch.rest.action.fieldstats.RestFieldStatsAction
===registerHandler===116===POST===/{index}/_field_stats===org.elasticsearch.rest.action.fieldstats.RestFieldStatsAction
===registerHandler===116===POST===/_cluster/reroute===org.elasticsearch.rest.action.admin.cluster.reroute.RestClusterRerouteAction
===registerHandler===116===POST===/_search_shards===org.elasticsearch.rest.action.admin.cluster.shards.RestClusterSearchShardsAction
===registerHandler===116===POST===/{index}/_search_shards===org.elasticsearch.rest.action.admin.cluster.shards.RestClusterSearchShardsAction
===registerHandler===116===POST===/{index}/{type}/_search_shards===org.elasticsearch.rest.action.admin.cluster.shards.RestClusterSearchShardsAction
===registerHandler===116===POST===/_snapshot/{repository}===org.elasticsearch.rest.action.admin.cluster.repositories.put.RestPutRepositoryAction
===registerHandler===116===POST===/_snapshot/{repository}/_verify===org.elasticsearch.rest.action.admin.cluster.repositories.verify.RestVerifyRepositoryAction
===registerHandler===116===POST===/_snapshot/{repository}/{snapshot}===org.elasticsearch.rest.action.admin.cluster.snapshots.create.RestCreateSnapshotAction
===registerHandler===116===POST===/_snapshot/{repository}/{snapshot}/_restore===org.elasticsearch.rest.action.admin.cluster.snapshots.restore.RestRestoreSnapshotAction
===registerHandler===116===POST===/_close===org.elasticsearch.rest.action.admin.indices.close.RestCloseIndexAction
===registerHandler===116===POST===/{index}/_close===org.elasticsearch.rest.action.admin.indices.close.RestCloseIndexAction
===registerHandler===116===POST===/_open===org.elasticsearch.rest.action.admin.indices.open.RestOpenIndexAction
===registerHandler===116===POST===/{index}/_open===org.elasticsearch.rest.action.admin.indices.open.RestOpenIndexAction
===registerHandler===116===POST===/{index}===org.elasticsearch.rest.action.admin.indices.create.RestCreateIndexAction
===registerHandler===116===POST===/{index}/_mtermvectors===org.elasticsearch.rest.action.termvectors.RestMultiTermVectorsAction
===registerHandler===116===POST===/{index}/{type}/_mtermvectors===org.elasticsearch.rest.action.termvectors.RestMultiTermVectorsAction
===registerHandler===116===POST===/_bulk===org.elasticsearch.rest.action.bulk.RestBulkAction
===registerHandler===116===POST===/{index}/_bulk===org.elasticsearch.rest.action.bulk.RestBulkAction
===registerHandler===116===POST===/{index}/{type}/_bulk===org.elasticsearch.rest.action.bulk.RestBulkAction
===registerHandler===116===POST===/{index}/{type}/{id}/_update===org.elasticsearch.rest.action.update.RestUpdateAction
===registerHandler===116===POST===/{index}/{type}/_percolate===org.elasticsearch.rest.action.percolate.RestPercolateAction
===registerHandler===116===POST===/{index}/{type}/{id}/_percolate===org.elasticsearch.rest.action.percolate.RestPercolateAction$RestPercolateExistingDocHandler
===registerHandler===116===POST===/{index}/{type}/_percolate/count===org.elasticsearch.rest.action.percolate.RestPercolateAction$RestCountPercolateDocHandler
===registerHandler===116===POST===/{index}/{type}/{id}/_percolate/count===org.elasticsearch.rest.action.percolate.RestPercolateAction$RestCountPercolateExistingDocHandler
===registerHandler===116===POST===/_mpercolate===org.elasticsearch.rest.action.percolate.RestMultiPercolateAction
===registerHandler===116===POST===/{index}/_mpercolate===org.elasticsearch.rest.action.percolate.RestMultiPercolateAction
===registerHandler===116===POST===/{index}/{type}/_mpercolate===org.elasticsearch.rest.action.percolate.RestMultiPercolateAction
===registerHandler===116===POST===/_search===org.elasticsearch.rest.action.search.RestSearchAction
===registerHandler===116===POST===/{index}/_search===org.elasticsearch.rest.action.search.RestSearchAction
===registerHandler===116===POST===/{index}/{type}/_search===org.elasticsearch.rest.action.search.RestSearchAction
===registerHandler===116===POST===/_search/template===org.elasticsearch.rest.action.search.RestSearchAction
===registerHandler===116===POST===/{index}/_search/template===org.elasticsearch.rest.action.search.RestSearchAction
===registerHandler===116===POST===/{index}/{type}/_search/template===org.elasticsearch.rest.action.search.RestSearchAction
===registerHandler===116===POST===/_search/exists===org.elasticsearch.rest.action.exists.RestExistsAction
===registerHandler===116===POST===/{index}/_search/exists===org.elasticsearch.rest.action.exists.RestExistsAction
===registerHandler===116===POST===/{index}/{type}/_search/exists===org.elasticsearch.rest.action.exists.RestExistsAction
===registerHandler===116===POST===/_search/scroll===org.elasticsearch.rest.action.search.RestSearchScrollAction
===registerHandler===116===POST===/_search/scroll/{scroll_id}===org.elasticsearch.rest.action.search.RestSearchScrollAction
===registerHandler===116===POST===/_msearch===org.elasticsearch.rest.action.search.RestMultiSearchAction

