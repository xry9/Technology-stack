https://www.runoob.com/cprogramming/c-variables.html
C 中的变量声明
变量声明向编译器保证变量以指定的类型和名称存在，这样编译器在不需要知道变量完整细节的情况下也能继续进一步的编译。变量声明只在编译时有它的意义，在程序连接时编译器需要实际的变量声明。
变量的声明有两种情况：
1、一种是需要建立存储空间的。例如：int a 在声明的时候就已经建立了存储空间。
2、另一种是不需要建立存储空间的，通过使用extern关键字声明变量名而不定义它。 例如：extern int a 其中变量 a 可以在别的文件中定义的。
除非有extern关键字，否则都是变量的定义。
extern int i; //声明，不是定义
int i; //声明，也是定义

https://www.runoob.com/cprogramming/c-storage-classes.html
  存储类定义 C 程序中变量/函数的范围（可见性）和生命周期。
  auto
  register, register 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。不能对它应用一元的 '&' 运算符（因为它没有内存位置）。还应注意的是，定义 'register' 并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制。
static, static 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。static 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。
extern, 仔细看
	https://www.runoob.com/w3cnote/cpp-static-usage.html
https://www.runoob.com/cprogramming/c-unions.html
https://www.runoob.com/cprogramming/c-preprocessors.html
https://www.runoob.com/cprogramming/c-header-files.html
https://www.runoob.com/cprogramming/c-error-handling.html
--------
https://www.cnblogs.com/Braveliu/p/11340132.html
	--在执行automake 之前执行 autoheader,生成config.h.in



https://www.runoob.com/cplusplus/cpp-storage-classes.html
https://www.runoob.com/cplusplus/cpp-functions.html
https://www.runoob.com/cplusplus/cpp-references.html
https://www.runoob.com/cplusplus/cpp-basic-input-output.html
https://www.runoob.com/cplusplus/cpp-constructor-destructor.html
https://www.runoob.com/cplusplus/cpp-copy-constructor.html
https://www.runoob.com/cplusplus/cpp-friend-functions.html
https://www.runoob.com/cplusplus/cpp-inline-functions.html
https://www.runoob.com/cplusplus/cpp-inheritance.html
https://www.runoob.com/cplusplus/cpp-overloading.html
https://www.runoob.com/cplusplus/cpp-polymorphism.html
https://www.runoob.com/cplusplus/cpp-data-abstraction.html
https://www.runoob.com/cplusplus/cpp-interfaces.html
https://www.runoob.com/cplusplus/cpp-multithreading.html
