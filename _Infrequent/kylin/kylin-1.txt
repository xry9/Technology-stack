由于参与Cuboid生成的维度都会作为Rowkey，因此我们需要把这些列添加为Rowkey当中。在这个案例中，总共需要添加7个Rowkey。在每个Rowkey上，还需要为列值设置编码
方法。在这个案例中，我们除了把LSTGFORMATNAME设置为fixedlength类型（长度为12）外，将其余的Rowkey都设置为dict编码。 Rowkey的顺序对于查询性能来说至关重要，
如第六章所讲，一般把最经常出现在过滤条件中的列放置在Rowkey的前面，在这个案例中，我们首先把PARTDT放在Rowkey的第一位。接下来，按照层级把商品分类的字段跟随
其后
========
Cube Segment：这是立方体数据的实际载体，并映射到HBase中的HTable。一个构建作业会为Cube实例创建一个新的Segment。 一旦数据在指定的数据周期内发生变化，
我们可以刷新相关的Segment以避免重建整个Cube
Lookup Table包含对事实表的某些列进行扩充说明的字段。在Kylin的quick start中给出sample cube（kylin_sales_cube）——其Fact Table为购买记录，lookup table有两个：用于对购买日期PART_DT、商品的LEAF_CATEG_ID与LSTG_SITE_ID字段进行扩展说明。
Derived，指该dimensions与维表的primary key是一一对应关系，可以更有效地减少cuboid数量，详细的解释参看这里；并且derived dimension只能由lookup table的列生成
然而，Kylin的Hierarchy dimensions并没有做集合包含约束，比如：kylin_sales_cube定义Hierarchy dimension为META_CATEG_NAME->CATEG_LVL2_NAME->CATEG_LVL3_NAME，但是同一个CATEG_LVL2_NAME可以对应不同META_CATEG_NAME。因此，hierarchy 显得非常鸡肋，以至于在Kylin后台处理时被废弃了（详见Li Yang在mail group中所说）：
https://mp.weixin.qq.com/s/NVFJe_kBYPKBSdkV5nfFXg
https://mp.weixin.qq.com/s/nRQ7EvGHmcQF-TwncZpGXw