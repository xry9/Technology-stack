
public class org.apache.flink.runtime.entrypoint.StandaloneSessionClusterEntrypoint extends SessionClusterEntrypoint {

	public static void main(String[] args) {
		StandaloneSessionClusterEntrypoint entrypoint = new StandaloneSessionClusterEntrypoint(configuration);
		ClusterEntrypoint.runClusterEntrypoint(entrypoint);
	}
}

public abstract class org.apache.flink.runtime.entrypoint.ClusterEntrypoint implements AutoCloseableAsync, FatalErrorHandler {
	public static void runClusterEntrypoint(ClusterEntrypoint clusterEntrypoint) {
		final String clusterEntrypointName = clusterEntrypoint.getClass().getSimpleName();
		clusterEntrypoint.startCluster();
	}
	public void startCluster() throws ClusterEntrypointException {
		runCluster(configuration);
	}
	private void runCluster(Configuration configuration) throws Exception {
		final DispatcherResourceManagerComponentFactory<?> dispatcherResourceManagerComponentFactory = createDispatcherResourceManagerComponentFactory(configuration);
		clusterComponent = dispatcherResourceManagerComponentFactory.create(configuration, commonRpcService, haServices, blobServer, heartbeatServices, metricRegistry, archivedExecutionGraphStore, new AkkaQueryServiceRetriever(metricQueryServiceActorSystem, Time.milliseconds(configuration.getLong(WebOptions.TIMEOUT))), this);
	}
}


public class org.apache.flink.runtime.resourcemanager.StandaloneResourceManager extends ResourceManager<ResourceID> {
	public StandaloneResourceManager(RpcService rpcService, String resourceManagerEndpointId, ResourceID resourceId, HighAvailabilityServices highAvailabilityServices, HeartbeatServices heartbeatServices, SlotManager slotManager, MetricRegistry metricRegistry, JobLeaderIdService jobLeaderIdService, ClusterInformation clusterInformation, FatalErrorHandler fatalErrorHandler, JobManagerMetricGroup jobManagerMetricGroup) {
		super(rpcService, resourceManagerEndpointId, resourceId, highAvailabilityServices, heartbeatServices, slotManager, metricRegistry, jobLeaderIdService, clusterInformation, fatalErrorHandler, jobManagerMetricGroup);
	}
}


public abstract class org.apache.flink.runtime.resourcemanager.ResourceManager<WorkerType extends ResourceIDRetrievable> extends FencedRpcEndpoint<ResourceManagerId> implements ResourceManagerGateway, LeaderContender {
public ResourceManager(RpcService rpcService, String resourceManagerEndpointId, ResourceID resourceId, HighAvailabilityServices highAvailabilityServices, HeartbeatServices heartbeatServices, SlotManager slotManager, MetricRegistry metricRegistry, JobLeaderIdService jobLeaderIdService, ClusterInformation clusterInformation, FatalErrorHandler fatalErrorHandler, JobManagerMetricGroup jobManagerMetricGroup) {
		super(rpcService, resourceManagerEndpointId);
	}
}

public class org.apache.flink.runtime.dispatcher.StandaloneDispatcher extends Dispatcher {
	public StandaloneDispatcher(RpcService rpcService, String endpointId, Configuration configuration, HighAvailabilityServices highAvailabilityServices, GatewayRetriever<ResourceManagerGateway> resourceManagerGatewayRetriever, BlobServer blobServer, HeartbeatServices heartbeatServices, JobManagerMetricGroup jobManagerMetricGroup, String metricQueryServicePath, ArchivedExecutionGraphStore archivedExecutionGraphStore, JobManagerRunnerFactory jobManagerRunnerFactory, FatalErrorHandler fatalErrorHandler, HistoryServerArchivist historyServerArchivist) throws Exception {
		super(rpcService, endpointId, configuration, highAvailabilityServices, highAvailabilityServices.getSubmittedJobGraphStore(), resourceManagerGatewayRetriever, blobServer, heartbeatServices, jobManagerMetricGroup, metricQueryServicePath, archivedExecutionGraphStore, jobManagerRunnerFactory, fatalErrorHandler, historyServerArchivist);
	}
}


public abstract class org.apache.flink.runtime.dispatcher.Dispatcher extends FencedRpcEndpoint<DispatcherId> implements DispatcherGateway, LeaderContender, SubmittedJobGraphStore.SubmittedJobGraphListener {

public Dispatcher(RpcService rpcService, String endpointId, Configuration configuration, HighAvailabilityServices highAvailabilityServices, SubmittedJobGraphStore submittedJobGraphStore, GatewayRetriever<ResourceManagerGateway> resourceManagerGatewayRetriever, BlobServer blobServer, HeartbeatServices heartbeatServices, JobManagerMetricGroup jobManagerMetricGroup, String metricServiceQueryPath, ArchivedExecutionGraphStore archivedExecutionGraphStore, JobManagerRunnerFactory jobManagerRunnerFactory, FatalErrorHandler fatalErrorHandler, HistoryServerArchivist historyServerArchivist) throws Exception {
		super(rpcService, endpointId);
	}
}

public abstract class FencedRpcEndpoint<F extends Serializable> extends RpcEndpoint {
	protected FencedRpcEndpoint(RpcService rpcService, String endpointId) {
		super(rpcService, endpointId);
	}
}

public abstract class org.apache.flink.runtime.rpc.RpcEndpoint implements RpcGateway, AutoCloseableAsync {
	protected RpcEndpoint(final RpcService rpcService, final String endpointId) {
		this.rpcService = checkNotNull(rpcService, "rpcService");
		this.endpointId = checkNotNull(endpointId, "endpointId");
		this.rpcServer = rpcService.startServer(this);
		this.mainThreadExecutor = new MainThreadExecutor(rpcServer, this::validateRunsInMainThread);
	}
}

public class org.apache.flink.runtime.rpc.akka.AkkaRpcService implements RpcService {
	public <C extends RpcEndpoint & RpcGateway> RpcServer startServer(C rpcEndpoint) {
		CompletableFuture<Void> terminationFuture = new CompletableFuture<>();
		final Props akkaRpcActorProps;
		akkaRpcActorProps = Props.create(FencedAkkaRpcActor.class, rpcEndpoint, terminationFuture, getVersion(), configuration.getMaximumFramesize());

		ActorRef actorRef;
		synchronized (lock) {
			actorRef = actorSystem.actorOf(akkaRpcActorProps, rpcEndpoint.getEndpointId());
			actors.put(actorRef, rpcEndpoint);
		}
		final String akkaAddress = AkkaUtils.getAkkaURL(actorSystem, actorRef);
		final String hostname;
		Option<String> host = actorRef.path().address().host();
		if (host.isEmpty()) {
			hostname = "localhost";
		} else {
			hostname = host.get();
		}
		Set<Class<?>> implementedRpcGateways = new HashSet<>(RpcUtils.extractImplementedRpcGateways(rpcEndpoint.getClass()));
		implementedRpcGateways.add(RpcServer.class);
		implementedRpcGateways.add(AkkaBasedEndpoint.class);
		final InvocationHandler akkaInvocationHandler;
		if (rpcEndpoint instanceof FencedRpcEndpoint) {
			akkaInvocationHandler = new FencedAkkaInvocationHandler<>(akkaAddress, hostname, actorRef, configuration.getTimeout(), configuration.getMaximumFramesize(), terminationFuture, ((FencedRpcEndpoint<?>) rpcEndpoint)::getFencingToken);
			implementedRpcGateways.add(FencedMainThreadExecutable.class);
		} else {
			akkaInvocationHandler = new AkkaInvocationHandler(akkaAddress,hostname, actorRef, configuration.getTimeout(), configuration.getMaximumFramesize(), terminationFuture);
		}
		ClassLoader classLoader = getClass().getClassLoader();
		RpcServer server = (RpcServer) Proxy.newProxyInstance(classLoader, implementedRpcGateways.toArray(new Class<?>[implementedRpcGateways.size()]), akkaInvocationHandler);
		return server;
	}
}


public class org.apache.flink.runtime.rpc.akka.FencedAkkaRpcActor<F extends Serializable, T extends FencedRpcEndpoint<F> & RpcGateway> extends AkkaRpcActor<T> {
	static final Logger LOG = LoggerFactory.getLogger(FencedAkkaRpcActor.class);
	public FencedAkkaRpcActor(T rpcEndpoint, CompletableFuture<Boolean> terminationFuture, int version, final long maximumFramesize) {
		super(rpcEndpoint, terminationFuture, version, maximumFramesize);
	}
	protected void handleRpcMessage(Object message) {
		if (message instanceof FencedMessage) {
			final F expectedFencingToken = rpcEndpoint.getFencingToken();
			FencedMessage<F, ?> fencedMessage = ((FencedMessage<F, ?>) message);
			F fencingToken = fencedMessage.getFencingToken();
			if (Objects.equals(expectedFencingToken, fencingToken)) {
				super.handleRpcMessage(fencedMessage.getPayload());
			}
		} else if (message instanceof UnfencedMessage) {
			super.handleRpcMessage(((UnfencedMessage<?>) message).getPayload());
		}
	}
}

class org.apache.flink.runtime.rpc.akka.AkkaRpcActor<T extends RpcEndpoint & RpcGateway> extends UntypedActor {
	AkkaRpcActor(final T rpcEndpoint, final CompletableFuture<Boolean> terminationFuture, final int version, final long maximumFramesize) {
		this.rpcEndpoint = checkNotNull(rpcEndpoint, "rpc endpoint");
	}
	public void onReceive(final Object message) {
		if (message instanceof RemoteHandshakeMessage) {
			handleHandshakeMessage((RemoteHandshakeMessage) message);
		} else if (message instanceof ControlMessages) {
			handleControlMessage(((ControlMessages) message));
		} else if (state.isRunning()) {
			handleRpcMessage(message);
		}
	}
	protected void handleRpcMessage(Object message) {
		if (message instanceof RunAsync) {
			handleRunAsync((RunAsync) message);
		} else if (message instanceof CallAsync) {
			handleCallAsync((CallAsync) message);
		} else if (message instanceof RpcInvocation) {
			handleRpcInvocation((RpcInvocation) message);
		}
	}
	private void handleRpcInvocation(RpcInvocation rpcInvocation) {
		Method rpcMethod = null;
		String methodName = rpcInvocation.getMethodName();
		Class<?>[] parameterTypes = rpcInvocation.getParameterTypes();
		rpcMethod = lookupRpcMethod(methodName, parameterTypes);
		if (rpcMethod.getReturnType().equals(Void.TYPE)) {
			rpcMethod.invoke(rpcEndpoint, rpcInvocation.getArgs());
		} else {
			result = rpcMethod.invoke(rpcEndpoint, rpcInvocation.getArgs());
			final String methodName = rpcMethod.getName();
			if (result instanceof CompletableFuture) {
				final CompletableFuture<?> responseFuture = (CompletableFuture<?>) result;
				sendAsyncResponse(responseFuture, methodName);
			} else {
				sendSyncResponse(result, methodName);
			}
		}

	}
}


public abstract class org.apache.flink.runtime.dispatcher.Dispatcher extends FencedRpcEndpoint<DispatcherId> implements DispatcherGateway, LeaderContender, SubmittedJobGraphStore.SubmittedJobGraphListener {

private CompletableFuture<JobManagerRunner> createJobManagerRunner(JobGraph jobGraph) {
		final RpcService rpcService = getRpcService();
		final CompletableFuture<JobManagerRunner> jobManagerRunnerFuture = CompletableFuture.supplyAsync(
			CheckedSupplier.unchecked(() -> jobManagerRunnerFactory.createJobManagerRunner(jobGraph, configuration, rpcService, highAvailabilityServices, heartbeatServices, jobManagerSharedServices, new DefaultJobManagerJobMetricGroupFactory(jobManagerMetricGroup), fatalErrorHandler)),
		rpcService.getExecutor());
		return jobManagerRunnerFuture.thenApply(FunctionUtils.uncheckedFunction(this::startJobManagerRunner));
	}
}

public enum org.apache.flink.runtime.dispatcher.DefaultJobManagerRunnerFactory implements JobManagerRunnerFactory {
	public JobManagerRunner createJobManagerRunner(JobGraph jobGraph, Configuration configuration, RpcService rpcService, HighAvailabilityServices highAvailabilityServices, HeartbeatServices heartbeatServices, JobManagerSharedServices jobManagerServices, JobManagerJobMetricGroupFactory jobManagerJobMetricGroupFactory, FatalErrorHandler fatalErrorHandler) throws Exception {
		final JobMasterConfiguration jobMasterConfiguration = JobMasterConfiguration.fromConfiguration(configuration);
		final SlotPoolFactory slotPoolFactory = DefaultSlotPoolFactory.fromConfiguration(configuration);
		final SchedulerFactory schedulerFactory = DefaultSchedulerFactory.fromConfiguration(configuration);
		final JobMasterServiceFactory jobMasterFactory = new DefaultJobMasterServiceFactory(jobMasterConfiguration, slotPoolFactory, schedulerFactory, rpcService, highAvailabilityServices, jobManagerServices, heartbeatServices, jobManagerJobMetricGroupFactory, fatalErrorHandler);
		return new JobManagerRunner(jobGraph, jobMasterFactory, highAvailabilityServices, jobManagerServices.getLibraryCacheManager(), jobManagerServices.getScheduledExecutorService(), fatalErrorHandler);
	}
}

public class org.apache.flink.runtime.jobmaster.JobManagerRunner implements LeaderContender, OnCompletionActions, AutoCloseableAsync {

	public JobManagerRunner(final JobGraph jobGraph, final JobMasterServiceFactory jobMasterFactory,final HighAvailabilityServices haServices, final LibraryCacheManager libraryCacheManager, final Executor executor, final FatalErrorHandler fatalErrorHandler) throws Exception {

		this.resultFuture = new CompletableFuture<>();
		this.terminationFuture = new CompletableFuture<>();
		this.leadershipOperation = CompletableFuture.completedFuture(null);
		this.jobGraph = checkNotNull(jobGraph);
		this.libraryCacheManager = checkNotNull(libraryCacheManager);
		this.executor = checkNotNull(executor);
		this.fatalErrorHandler = checkNotNull(fatalErrorHandler);

		libraryCacheManager.registerJob(jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths());

		final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID());
		this.runningJobsRegistry = haServices.getRunningJobsRegistry();
		this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID());
		this.leaderGatewayFuture = new CompletableFuture<>();
		this.jobMasterService = jobMasterFactory.createJobMasterService(jobGraph, this, userCodeLoader);
	}
}

public class org.apache.flink.runtime.jobmaster.JobMaster extends FencedRpcEndpoint<JobMasterId> implements JobMasterGateway, JobMasterService {
	public JobMaster(RpcService rpcService, JobMasterConfiguration jobMasterConfiguration, ResourceID resourceId, JobGraph jobGraph, HighAvailabilityServices highAvailabilityService, SlotPoolFactory slotPoolFactory, SchedulerFactory schedulerFactory, JobManagerSharedServices jobManagerSharedServices, HeartbeatServices heartbeatServices, JobManagerJobMetricGroupFactory jobMetricGroupFactory, OnCompletionActions jobCompletionActions, FatalErrorHandler fatalErrorHandler, ClassLoader userCodeLoader) throws Exception {
		super(rpcService, AkkaRpcServiceUtils.createRandomName(JOB_MANAGER_NAME));
	}
}